[
    {
        "component": "accordion",
        "name": "Accordion",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Accordion.svelte",
                "dir": "accordion",
                "content": "<script lang=\"ts\">\n\timport { type CreateAccordionProps, ctx } from \".\";\n\n\texport let multiple: CreateAccordionProps[\"multiple\"] = false;\n\texport let disabled: CreateAccordionProps[\"disabled\"] = false;\n\texport let defaultValue: CreateAccordionProps[\"defaultValue\"] = undefined;\n\texport let value: CreateAccordionProps[\"value\"] = undefined;\n\texport let onValueChange: CreateAccordionProps[\"onValueChange\"] = undefined;\n\n\tconst root = ctx.set({\n\t\tvalue,\n\t\tmultiple,\n\t\tdisabled,\n\t\tdefaultValue,\n\t\tonValueChange\n\t});\n</script>\n\n<div use:root {...$root} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AccordionContent.svelte",
                "dir": "accordion",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { slide } from \"svelte/transition\";\n\timport { ctx } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst { content, isSelected, props } = ctx.getContent();\n</script>\n\n{#if $isSelected(props)}\n\t<div\n\t\tuse:content\n\t\t{...$content(props)}\n\t\tclass={cn(\"overflow-hidden text-sm\", className)}\n\t\ttransition:slide={{ duration: 200 }}\n\t\t{...$$restProps}\n\t>\n\t\t<div class=\"pb-4 pt-0\">\n\t\t\t<slot />\n\t\t</div>\n\t</div>\n{/if}\n"
            },
            {
                "name": "AccordionItem.svelte",
                "dir": "accordion",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, type AccordionItemProps } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let value: AccordionItemProps[\"value\"];\n\texport let disabled: AccordionItemProps[\"disabled\"] = false;\n\n\tconst { item, props } = ctx.setItem({ value, disabled });\n</script>\n\n<div\n\tuse:item\n\t{...$item(props)}\n\tclass={cn(\"border-b\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AccordionTrigger.svelte",
                "dir": "accordion",
                "content": "<script lang=\"ts\">\n\timport { ChevronDown } from \"lucide-svelte\";\n\timport { cn } from \"$lib/utils\";\n\timport { type AccordionHeadingProps, ctx } from \".\";\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let level: AccordionHeadingProps[\"level\"] = 3;\n\n\tconst { heading, trigger, props } = ctx.getTriggerAndHeading(level);\n</script>\n\n<div use:heading {...$heading(props.heading)} class=\"flex\">\n\t<button\n\t\tuse:trigger\n\t\t{...$trigger(props.trigger)}\n\t\tclass={cn(\n\t\t\t\"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[aria-expanded=true]>svg]:rotate-180\",\n\t\t\tclassName\n\t\t)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t\t<ChevronDown class=\"h-4 w-4 transition-transform duration-200\" />\n\t</button>\n</div>\n"
            },
            {
                "name": "index.ts",
                "dir": "accordion",
                "content": "import { default as Root } from \"./Accordion.svelte\";\nimport { default as Content } from \"./AccordionContent.svelte\";\nimport { default as Item } from \"./AccordionItem.svelte\";\nimport { default as Trigger } from \"./AccordionTrigger.svelte\";\nimport {\n\tcreateAccordion,\n\ttype Accordion as AccordionReturn,\n\ttype AccordionItemProps as ItemProps,\n\ttype CreateAccordionProps,\n\ttype AccordionHeadingProps as HeadingProps\n} from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\n\nconst ITEM_PROPS = \"AccordionItemProps\";\nconst NAME = \"Accordion\";\n\nexport const ctx = {\n\tset: setAccordion,\n\tget: getAccordion,\n\tsetItem: setAccordionItem,\n\tgetItemProps,\n\tgetContent,\n\tgetTriggerAndHeading\n};\n\nfunction setAccordion(props: CreateAccordionProps) {\n\tsetContext(NAME, createAccordion({ ...props }));\n\tconst {\n\t\telements: { root }\n\t} = getContext<AccordionReturn>(NAME);\n\treturn root;\n}\n\nfunction getAccordion() {\n\treturn getContext<AccordionReturn>(NAME);\n}\n\nfunction setAccordionItem(props: AccordionItemProps) {\n\tsetContext(ITEM_PROPS, props);\n\tconst {\n\t\telements: { item }\n\t} = getAccordion();\n\treturn { item, props: getContext<AccordionItemProps>(ITEM_PROPS) };\n}\n\nfunction getItemProps() {\n\tconst itemProps = getContext<AccordionItemProps>(ITEM_PROPS);\n\treturn itemProps;\n}\n\nfunction getContent() {\n\tconst {\n\t\telements: { content },\n\t\thelpers: { isSelected },\n\t\tstates: { value }\n\t} = getAccordion();\n\tconst { value: props } = getItemProps();\n\treturn { content, props, isSelected, value };\n}\n\nfunction getTriggerAndHeading(level: AccordionHeadingProps[\"level\"]) {\n\tconst {\n\t\telements: { trigger, heading },\n\t\tstates: { value }\n\t} = getAccordion();\n\tconst props = getItemProps();\n\treturn {\n\t\ttrigger,\n\t\theading,\n\t\tprops: {\n\t\t\theading: { level },\n\t\t\ttrigger: props\n\t\t},\n\t\tvalue\n\t};\n}\n\ntype ObjectVariation<T> = T extends object ? T : never;\n\nexport const Accordion = Object.assign(Root, {\n\tContent,\n\tItem,\n\tTrigger\n});\n\nexport { Root as AccordionRoot };\nexport { Content as AccordionContent };\nexport { Item as AccordionItem };\nexport { Trigger as AccordionTrigger };\n\nexport type AccordionElements = {\n\titem: AccordionItemProps;\n\tcontent: AccordionItemProps;\n\ttrigger: AccordionItemProps;\n\theading: AccordionHeadingProps;\n};\nexport type AccordionItemProps = ObjectVariation<ItemProps>;\nexport type AccordionHeadingProps = ObjectVariation<HeadingProps>;\nexport type { CreateAccordionProps } from \"@melt-ui/svelte\";\n"
            }
        ]
    },
    {
        "component": "alert",
        "name": "Alert",
        "files": [
            {
                "name": "Alert.svelte",
                "dir": "alert",
                "content": "<script lang=\"ts\">\n\timport type { VariantProps } from \"class-variance-authority\";\n\timport { tv } from \"tailwind-variants\";\n\timport { cn } from \"$lib/utils\";\n\n\tconst alertVariants = tv({\n\t\tbase: \"relative w-full rounded-lg border p-4 [&>svg]:absolute [&>svg]:text-foreground [&>svg]:left-4 [&>svg]:top-4 [&>svg+div]:translate-y-[-3px] [&:has(svg)]:pl-11\",\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"bg-background text-foreground\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"text-destructive border-destructive/50 dark:border-destructive [&>svg]:text-destructive text-destructive\"\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\"\n\t\t}\n\t});\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let variant: VariantProps<typeof alertVariants>[\"variant\"] =\n\t\t\"default\";\n</script>\n\n<div class={cn(alertVariants({ variant }), className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AlertDescription.svelte",
                "dir": "alert",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div class={cn(\"text-sm [&_p]:leading-relaxed\", className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AlertTitle.svelte",
                "dir": "alert",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let level: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" = \"h5\";\n</script>\n\n<svelte:element\n\tthis={level}\n\tclass={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</svelte:element>\n"
            },
            {
                "name": "index.ts",
                "dir": "alert",
                "content": "export { default as Alert } from \"./Alert.svelte\";\nexport { default as AlertDescription } from \"./AlertDescription.svelte\";\nexport { default as AlertTitle } from \"./AlertTitle.svelte\";\n"
            }
        ]
    },
    {
        "component": "alert-dialog",
        "name": "Alert Dialog",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "AlertDialogAction.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { buttonVariants } from \"@/registry/default/ui/button\";\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst action = ctx.getClose();\n</script>\n\n<button\n\tuse:melt={$action}\n\ton:m-click\n\ton:m-keydown\n\tclass={cn(buttonVariants(), className)}\n\t{...$$restProps}\n>\n\t<slot />\n</button>\n"
            },
            {
                "name": "AlertDialogCancel.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { buttonVariants } from \"@/registry/default/ui/button\";\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst cancel = ctx.getClose();\n</script>\n\n<button\n\tuse:melt={$cancel}\n\ton:m-click\n\ton:m-keydown\n\tclass={cn(\n\t\tbuttonVariants({ variant: \"outline\" }),\n\t\t\"mt-2 sm:mt-0\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</button>\n"
            },
            {
                "name": "AlertDialogContent.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, AlertDialogPortal, AlertDialogOverlay, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst content = ctx.getContent();\n</script>\n\n<AlertDialogPortal>\n\t<AlertDialogOverlay />\n\t<div\n\t\tuse:melt={$content}\n\t\tclass={cn(\n\t\t\t\"fixed z-50 grid w-full max-w-lg scale-100 gap-4 border bg-background p-6 opacity-100 shadow-lg animate-in fade-in-90 slide-in-from-bottom-10 sm:rounded-lg sm:zoom-in-90 sm:slide-in-from-bottom-0 md:w-full\",\n\t\t\tclassName\n\t\t)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</div>\n</AlertDialogPortal>\n"
            },
            {
                "name": "AlertDialogDescription.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst description = ctx.getDescription();\n</script>\n\n<div\n\tuse:melt={$description}\n\tclass={cn(\"text-sm text-muted-foreground\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AlertDialogFooter.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\n\t\t\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AlertDialogHeader.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AlertDialogOverlay.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst overlay = ctx.getOverlay();\n</script>\n\n<div\n\tuse:melt={$overlay}\n\tclass={cn(\n\t\t\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-opacity animate-in fade-in\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "AlertDialogPortal.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { ctx, melt } from \".\";\n\tconst { portal, open } = ctx.getPortal();\n</script>\n\n<div use:melt={$portal} {...$$restProps}>\n\t{#if $open}\n\t\t<div\n\t\t\tclass=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\"\n\t\t>\n\t\t\t<slot />\n\t\t</div>\n\t{/if}\n</div>\n"
            },
            {
                "name": "AlertDialogTitle.svelte",
                "dir": "alert-dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let level: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" = \"h3\";\n\tconst title = ctx.getTitle();\n</script>\n\n<svelte:element\n\tthis={level}\n\tuse:melt={$title}\n\tclass={cn(\"text-lg font-semibold\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</svelte:element>\n"
            },
            {
                "name": "index.ts",
                "dir": "alert-dialog",
                "content": "import {\n\tcreateDialog,\n\ttype CreateDialogProps,\n\ttype Dialog,\n\tmelt\n} from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\nimport { default as Root } from \"./AlertDialog.svelte\";\nimport { default as Action } from \"./AlertDialogAction.svelte\";\nimport { default as Cancel } from \"./AlertDialogCancel.svelte\";\nimport { default as Content } from \"./AlertDialogContent.svelte\";\nimport { default as Description } from \"./AlertDialogDescription.svelte\";\nimport { default as Footer } from \"./AlertDialogFooter.svelte\";\nimport { default as Header } from \"./AlertDialogHeader.svelte\";\nimport { default as Overlay } from \"./AlertDialogOverlay.svelte\";\nimport { default as Portal } from \"./AlertDialogPortal.svelte\";\nimport { default as Title } from \"./AlertDialogTitle.svelte\";\nimport { default as Trigger } from \"./AlertDialogTrigger.svelte\";\n\nconst NAME = \"alertDialog\";\n\nfunction set(props: CreateDialogProps) {\n\tconst alertDialog = createDialog({ ...props });\n\tsetContext(NAME, alertDialog);\n\tconst {\n\t\telements: { trigger }\n\t} = alertDialog;\n\n\treturn trigger;\n}\n\nfunction get() {\n\treturn getContext<Dialog>(NAME);\n}\n\nexport const ctx = {\n\tset: set,\n\tget: get,\n\tgetClose: () => get().elements.close,\n\tgetContent: () => get().elements.content,\n\tgetOverlay: () => get().elements.overlay,\n\tgetPortal,\n\tgetTitle: () => get().elements.title,\n\tgetDescription: () => get().elements.description,\n\tgetTrigger: () => get().elements.trigger\n};\n\nfunction getPortal() {\n\tconst {\n\t\telements: { portalled },\n\t\tstates: { open }\n\t} = get();\n\n\treturn {\n\t\tportal: portalled,\n\t\topen\n\t};\n}\n\nexport const AlertDialog = Object.assign(Root, {\n\tAction,\n\tCancel,\n\tContent,\n\tDescription,\n\tFooter,\n\tHeader,\n\tOverlay,\n\tPortal,\n\tTitle,\n\tTrigger\n});\n\nexport { Root as AlertDialogRoot };\nexport { Action as AlertDialogAction };\nexport { Cancel as AlertDialogCancel };\nexport { Content as AlertDialogContent };\nexport { Description as AlertDialogDescription };\nexport { Footer as AlertDialogFooter };\nexport { Header as AlertDialogHeader };\nexport { Overlay as AlertDialogOverlay };\nexport { Portal as AlertDialogPortal };\nexport { Title as AlertDialogTitle };\nexport { Trigger as AlertDialogTrigger };\n\nexport type { CreateDialogProps as CreateAlertDialogProps } from \"@melt-ui/svelte\";\n\nexport { melt };\n"
            }
        ]
    },
    {
        "component": "aspect-ratio",
        "name": "Aspect Ratio",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "AspectRatio.svelte",
                "dir": "aspect-ratio",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let ratio: number = 4 / 3;\n\n\t$: ratioClass = `aspect-[${ratio}]`;\n</script>\n\n<div class={cn(ratioClass, className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "index.ts",
                "dir": "aspect-ratio",
                "content": "export { default as AspectRatio } from \"./AspectRatio.svelte\";\n"
            }
        ]
    },
    {
        "component": "avatar",
        "name": "Avatar",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Avatar.svelte",
                "dir": "avatar",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, type CreateAvatar } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let delayMs: CreateAvatar[\"delayMs\"] = undefined;\n\texport let loadingStatus: CreateAvatar[\"loadingStatus\"] = undefined;\n\texport let onLoadingStatusChange: CreateAvatar[\"onLoadingStatusChange\"] =\n\t\tundefined;\n\n\tctx.set({ delayMs, loadingStatus, onLoadingStatusChange });\n</script>\n\n<div\n\tclass={cn(\n\t\t\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AvatarFallback.svelte",
                "dir": "avatar",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst fallback = ctx.getFallback();\n</script>\n\n<div\n\tuse:melt={$fallback}\n\tclass={cn(\n\t\t\"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "AvatarImage.svelte",
                "dir": "avatar",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport let src: string | undefined = undefined;\n\texport let alt: string | undefined = undefined;\n\texport { className as class };\n\tconst image = ctx.getImage(src);\n</script>\n\n<img\n\tuse:melt={$image}\n\t{alt}\n\tclass={cn(\"aspect-square h-full w-full\", className)}\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "index.ts",
                "dir": "avatar",
                "content": "import {\n\tcreateAvatar,\n\ttype Avatar as AvatarReturn,\n\ttype CreateAvatarProps,\n\tmelt\n} from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\nimport { default as Root } from \"./Avatar.svelte\";\nimport { default as Fallback } from \"./AvatarFallback.svelte\";\nimport { default as Image } from \"./AvatarImage.svelte\";\n\nconst NAME = \"avatar\";\n\nfunction get() {\n\treturn getContext<AvatarReturn>(NAME);\n}\n\nfunction set(props: CreateAvatar) {\n\tsetContext(NAME, createAvatar({ ...props, src: \"\" }));\n}\n\nfunction getImage(srcProp: string = \"\") {\n\tconst {\n\t\telements: { image },\n\t\toptions: { src }\n\t} = get();\n\tsrc.set(srcProp);\n\treturn image;\n}\n\nexport const ctx = {\n\tset,\n\tget,\n\tgetImage: getImage,\n\tgetFallback: () => get().elements.fallback\n};\n\nexport const Avatar = Object.assign(Root, {\n\tFallback,\n\tImage\n});\n\nexport { Root as AvatarRoot };\nexport { Image as AvatarImage };\nexport { Fallback as AvatarFallback };\n\nexport { melt };\n\nexport type CreateAvatar = Omit<CreateAvatarProps, \"src\">;\n"
            }
        ]
    },
    {
        "component": "badge",
        "name": "Badge",
        "files": [
            {
                "name": "Badge.svelte",
                "dir": "badge",
                "content": "<script lang=\"ts\">\n\timport type { VariantProps } from \"class-variance-authority\";\n\timport type { HTMLAnchorAttributes } from \"svelte/elements\";\n\timport { cn } from \"$lib/utils\";\n\timport { badgeVariants } from \".\";\n\n\texport let href: HTMLAnchorAttributes[\"href\"] = undefined;\n\texport let variant: VariantProps<typeof badgeVariants>[\"variant\"] =\n\t\t\"default\";\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<svelte:element\n\tthis={href ? \"a\" : \"span\"}\n\t{href}\n\tclass={cn(badgeVariants({ variant, className }))}\n\t{...$$restProps}\n>\n\t<slot />\n</svelte:element>\n"
            },
            {
                "name": "index.ts",
                "dir": "badge",
                "content": "import { cva } from \"class-variance-authority\";\n\nexport { default as Badge } from \"./Badge.svelte\";\nexport const badgeVariants = cva(\n\t\"inline-flex items-center border rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault:\n\t\t\t\t\t\"bg-primary hover:bg-primary/80 border-transparent text-primary-foreground\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"bg-secondary hover:bg-secondary/80 border-transparent text-secondary-foreground\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"bg-destructive hover:bg-destructive/80 border-transparent text-destructive-foreground\",\n\t\t\t\toutline: \"text-foreground\"\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\"\n\t\t}\n\t}\n);\n"
            }
        ]
    },
    {
        "component": "button",
        "name": "Button",
        "files": [
            {
                "name": "Button.svelte",
                "dir": "button",
                "content": "<script lang=\"ts\">\n\timport type { VariantProps } from \"class-variance-authority\";\n\timport type {\n\t\tHTMLAnchorAttributes,\n\t\tHTMLButtonAttributes\n\t} from \"svelte/elements\";\n\timport { cn } from \"$lib/utils\";\n\timport { buttonVariants, type Builder, allActions, getAttrs } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let href: HTMLAnchorAttributes[\"href\"] = undefined;\n\texport let type: HTMLButtonAttributes[\"type\"] = undefined;\n\texport let variant: VariantProps<typeof buttonVariants>[\"variant\"] =\n\t\t\"default\";\n\texport let size: VariantProps<typeof buttonVariants>[\"size\"] = \"default\";\n\texport let builders: Builder[] = [];\n\n\ttype Props = {\n\t\tclass?: string | null;\n\t\tvariant?: VariantProps<typeof buttonVariants>[\"variant\"];\n\t\tsize?: VariantProps<typeof buttonVariants>[\"size\"];\n\t\tbuilders?: Builder[];\n\t};\n\n\tinterface AnchorElement extends Props, HTMLAnchorAttributes {\n\t\thref?: HTMLAnchorAttributes[\"href\"];\n\t\ttype?: never;\n\t}\n\n\tinterface ButtonElement extends Props, HTMLButtonAttributes {\n\t\ttype?: HTMLButtonAttributes[\"type\"];\n\t\thref?: never;\n\t}\n\n\ttype $$Props = AnchorElement | ButtonElement;\n</script>\n\n{#if builders.length}\n\t<svelte:element\n\t\tthis={href ? \"a\" : \"button\"}\n\t\ttype={href ? undefined : type}\n\t\t{href}\n\t\tclass={cn(buttonVariants({ variant, size, className }))}\n\t\ton:click\n\t\ton:change\n\t\ton:keydown\n\t\ton:keyup\n\t\ton:mouseenter\n\t\ton:mouseleave\n\t\trole=\"button\"\n\t\ttabindex=\"0\"\n\t\tuse:allActions={{ builders }}\n\t\t{...getAttrs(builders)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</svelte:element>\n{:else}\n\t<svelte:element\n\t\tthis={href ? \"a\" : \"button\"}\n\t\ttype={href ? undefined : type}\n\t\t{href}\n\t\tclass={cn(buttonVariants({ variant, size, className }))}\n\t\t{...$$restProps}\n\t\ton:click\n\t\ton:change\n\t\ton:keydown\n\t\ton:keyup\n\t\ton:mouseenter\n\t\ton:mouseleave\n\t\trole=\"button\"\n\t\ttabindex=\"0\"\n\t>\n\t\t<slot />\n\t</svelte:element>\n{/if}\n"
            },
            {
                "name": "index.ts",
                "dir": "button",
                "content": "import { cva } from \"class-variance-authority\";\nimport type { Action, ActionReturn } from \"svelte/action\";\n\nexport { default as Button } from \"./Button.svelte\";\n\nexport const buttonVariants = cva(\n\t\"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault:\n\t\t\t\t\t\"bg-primary text-primary-foreground hover:bg-primary/90\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border border-input hover:bg-accent hover:text-accent-foreground\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n\t\t\t\tghost: \"hover:bg-accent hover:text-accent-foreground\",\n\t\t\t\tlink: \"underline-offset-4 hover:underline text-primary\"\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: \"h-10 py-2 px-4\",\n\t\t\t\tsm: \"h-9 px-3 rounded-md\",\n\t\t\t\tlg: \"h-11 px-8 rounded-md\"\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"default\"\n\t\t}\n\t}\n);\nexport type Builder = {\n\t[x: PropertyKey]: unknown;\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\taction: Action<HTMLElement, any, any>;\n};\nexport const allActions: Action<\n\tHTMLElement,\n\t{ builders: Builder[] },\n\tRecord<string, unknown | undefined>\n> = (node, params) => {\n\tconst unsubs: ActionReturn[] = [];\n\tparams.builders.forEach((builder) => {\n\t\tconst act = builder.action(node);\n\t\tif (act) {\n\t\t\tunsubs.push(act);\n\t\t}\n\t});\n\treturn {\n\t\tdestroy: () => {\n\t\t\tunsubs.forEach((unsub) => {\n\t\t\t\tif (unsub.destroy) {\n\t\t\t\t\tunsub.destroy();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport function getAttrs(builders: Builder[]) {\n\tconst attrs: Record<string, unknown | undefined> = {};\n\tbuilders.forEach((builder) => {\n\t\tObject.keys(builder).forEach((key) => {\n\t\t\tif (key !== \"action\") {\n\t\t\t\tattrs[key] = builder[key];\n\t\t\t}\n\t\t});\n\t});\n\treturn attrs;\n}\n"
            }
        ]
    },
    {
        "component": "card",
        "name": "Card",
        "files": [
            {
                "name": "Card.svelte",
                "dir": "card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<!-- svelte-ignore a11y-no-static-element-interactions -->\n<div\n\tclass={cn(\n\t\t\"rounded-lg border bg-card text-card-foreground shadow-sm\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n\ton:click\n\ton:focusin\n\ton:focusout\n\ton:mouseenter\n\ton:mouseleave\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "CardContent.svelte",
                "dir": "card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div class={cn(\"p-6 pt-0\", className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "CardDescription.svelte",
                "dir": "card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<p class={cn(\"text-sm text-muted-foreground\", className)} {...$$restProps}>\n\t<slot />\n</p>\n"
            },
            {
                "name": "CardFooter.svelte",
                "dir": "card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div class={cn(\"flex items-center p-6 pt-0\", className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "CardHeader.svelte",
                "dir": "card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div class={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "CardTitle.svelte",
                "dir": "card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let tag: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" = \"h3\";\n</script>\n\n<svelte:element\n\tthis={tag}\n\tclass={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</svelte:element>\n"
            },
            {
                "name": "index.ts",
                "dir": "card",
                "content": "import Root from \"./Card.svelte\";\nimport Content from \"./CardContent.svelte\";\nimport Description from \"./CardDescription.svelte\";\nimport Footer from \"./CardFooter.svelte\";\nimport Header from \"./CardHeader.svelte\";\nimport Title from \"./CardTitle.svelte\";\n\nexport const Card = Object.assign(Root, {\n\tContent,\n\tDescription,\n\tFooter,\n\tHeader,\n\tTitle\n});\n\nexport {\n\tRoot as CardRoot,\n\tContent as CardContent,\n\tDescription as CardDescription,\n\tFooter as CardFooter,\n\tHeader as CardHeader,\n\tTitle as CardTitle\n};\n"
            }
        ]
    },
    {
        "component": "checkbox",
        "name": "Checkbox",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Checkbox.svelte",
                "dir": "checkbox",
                "content": "<script lang=\"ts\">\n\timport {\n\t\tcreateCheckbox,\n\t\tmelt,\n\t\ttype CreateCheckboxProps\n\t} from \"@melt-ui/svelte\";\n\timport { Check, Minus } from \"lucide-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let checked: CreateCheckboxProps[\"checked\"] = undefined;\n\texport let defaultChecked: CreateCheckboxProps[\"defaultChecked\"] =\n\t\tundefined;\n\texport let onCheckedChange: CreateCheckboxProps[\"onCheckedChange\"] =\n\t\tundefined;\n\texport let disabled: CreateCheckboxProps[\"disabled\"] = undefined;\n\texport let name: CreateCheckboxProps[\"name\"] = undefined;\n\texport let required: CreateCheckboxProps[\"required\"] = undefined;\n\texport let value: CreateCheckboxProps[\"value\"] = undefined;\n\n\tconst {\n\t\telements: { root },\n\t\thelpers: { isChecked, isIndeterminate }\n\t} = createCheckbox({\n\t\tchecked,\n\t\tdefaultChecked,\n\t\tonCheckedChange,\n\t\tdisabled,\n\t\tname,\n\t\trequired,\n\t\tvalue\n\t});\n</script>\n\n<button\n\tuse:melt={$root}\n\tclass={cn(\n\t\t\"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<div class={cn(\"flex items-center justify-center text-current\")}>\n\t\t{#if $isChecked}\n\t\t\t<Check class=\"h-4 w-4\" />\n\t\t{:else if $isIndeterminate}\n\t\t\t<Minus class=\"h-4 w-4\" />\n\t\t{/if}\n\t</div>\n</button>\n"
            },
            {
                "name": "index.ts",
                "dir": "checkbox",
                "content": "export { default as Checkbox } from \"./Checkbox.svelte\";\n"
            }
        ]
    },
    {
        "component": "collapsible",
        "name": "Collapsible",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "index.ts",
                "dir": "collapsible",
                "content": "import {\n\tcreateCollapsible,\n\ttype Collapsible as CollapsibleReturn,\n\ttype CreateCollapsibleProps as CollapsibleProps,\n\tmelt\n} from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\nimport { default as Root } from \"./Collapsible.svelte\";\nimport { default as Content } from \"./CollapsibleContent.svelte\";\nimport { default as Trigger } from \"./CollapsibleTrigger.svelte\";\n\nconst NAME = \"collapsible\";\n\nexport const ctx = {\n\tget,\n\tset,\n\tgetContent,\n\tgetTrigger: () => get().elements.trigger\n};\n\nfunction get() {\n\treturn getContext<CollapsibleReturn>(NAME);\n}\n\nfunction set(props: CollapsibleProps) {\n\tconst collapsible = createCollapsible({ ...props });\n\tsetContext(NAME, collapsible);\n\tconst {\n\t\telements: { root }\n\t} = collapsible;\n\treturn root;\n}\n\nfunction getContent() {\n\tconst {\n\t\telements: { content },\n\t\tstates: { open }\n\t} = get();\n\treturn { content, open };\n}\n\nexport { melt, type CollapsibleProps };\n\nexport const Collapsible = Object.assign(Root, { Content, Trigger });\n\nexport {\n\tRoot as CollapsibleRoot,\n\tContent as CollapsibleContent,\n\tTrigger as CollapsibleTrigger\n};\n"
            }
        ]
    },
    {
        "component": "dialog",
        "name": "Dialog",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "DialogContent.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, DialogPortal, DialogOverlay, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst content = ctx.getContent();\n</script>\n\n<DialogPortal>\n\t<DialogOverlay />\n\t<div\n\t\tuse:melt={$content}\n\t\tclass={cn(\n\t\t\t\"fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background p-6 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0\",\n\t\t\tclassName\n\t\t)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</div>\n</DialogPortal>\n"
            },
            {
                "name": "DialogDescription.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst description = ctx.getDescription();\n</script>\n\n<div\n\tuse:melt={$description}\n\tclass={cn(\"text-sm text-muted-foreground\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "DialogFooter.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\n\t\t\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "DialogHeader.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "DialogOverlay.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\tconst overlay = ctx.getOverlay();\n</script>\n\n<div\n\tuse:melt={$overlay}\n\tclass={cn(\n\t\t\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "DialogPortal.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { ctx, melt } from \".\";\n\tconst { portal, open } = ctx.getPortal();\n</script>\n\n<div use:melt={$portal} {...$$restProps}>\n\t{#if $open}\n\t\t<div\n\t\t\tclass=\"fixed inset-0 z-50 flex items-start justify-center sm:items-center\"\n\t\t>\n\t\t\t<slot />\n\t\t</div>\n\t{/if}\n</div>\n"
            },
            {
                "name": "DialogTitle.svelte",
                "dir": "dialog",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let level: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" = \"h3\";\n\tconst title = ctx.getTitle();\n</script>\n\n<svelte:element\n\tthis={level}\n\tuse:melt={$title}\n\tclass={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</svelte:element>\n"
            },
            {
                "name": "index.ts",
                "dir": "dialog",
                "content": "import {\n\tcreateDialog,\n\ttype CreateDialogProps,\n\ttype Dialog as DialogReturn\n} from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\n\nimport Root from \"./Dialog.svelte\";\nimport Content from \"./DialogContent.svelte\";\nimport Description from \"./DialogDescription.svelte\";\nimport Footer from \"./DialogFooter.svelte\";\nimport Header from \"./DialogHeader.svelte\";\nimport Overlay from \"./DialogOverlay.svelte\";\nimport Portal from \"./DialogPortal.svelte\";\nimport Title from \"./DialogTitle.svelte\";\nimport Trigger from \"./DialogTrigger.svelte\";\n\nexport const ctx = {\n\tset,\n\tget,\n\tgetClose: () => get().elements.close,\n\tgetContent: () => get().elements.content,\n\tgetOverlay: () => get().elements.overlay,\n\tgetPortal,\n\tgetTitle: () => get().elements.title,\n\tgetDescription: () => get().elements.description,\n\tgetTrigger: () => get().elements.trigger\n};\n\nconst NAME = \"Dialog\";\n\nfunction set(props: CreateDialogProps) {\n\tconst Dialog = createDialog({ ...props });\n\tsetContext(NAME, Dialog);\n\tconst {\n\t\telements: { trigger }\n\t} = Dialog;\n\n\treturn trigger;\n}\n\nfunction get() {\n\treturn getContext<DialogReturn>(NAME);\n}\n\nfunction getPortal() {\n\tconst {\n\t\telements: { portalled },\n\t\tstates: { open }\n\t} = get();\n\treturn { portal: portalled, open };\n}\nexport {\n\tmelt,\n\ttype CreateDialogProps as CreateDialogProps\n} from \"@melt-ui/svelte\";\n\nexport const Dialog = Object.assign(Root, {\n\tContent,\n\tDescription,\n\tFooter,\n\tHeader,\n\tOverlay,\n\tPortal,\n\tTitle,\n\tTrigger\n});\n\nexport {\n\tRoot as DialogRoot,\n\tContent as DialogContent,\n\tDescription as DialogDescription,\n\tFooter as DialogFooter,\n\tHeader as DialogHeader,\n\tOverlay as DialogOverlay,\n\tPortal as DialogPortal,\n\tTitle as DialogTitle,\n\tTrigger as DialogTrigger\n};\n"
            }
        ]
    },
    {
        "component": "hover-card",
        "name": "Hover Card",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "HoverCardContent.svelte",
                "dir": "hover-card",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst { content, open } = ctx.getContent();\n</script>\n\n{#if $open}\n\t<div\n\t\tuse:melt={$content}\n\t\tclass={cn(\n\t\t\t\"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none animate-in zoom-in-90 mt-3\",\n\t\t\tclassName\n\t\t)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</div>\n{/if}\n"
            },
            {
                "name": "index.ts",
                "dir": "hover-card",
                "content": "import {\n\tcreateHoverCard,\n\ttype CreateHoverCardProps as HoverCardProps,\n\ttype HoverCard as HoverCardReturn,\n\tmelt\n} from \"@melt-ui/svelte\";\nimport { default as Root } from \"./HoverCard.svelte\";\nimport { default as Content } from \"./HoverCardContent.svelte\";\nimport { default as Trigger } from \"./HoverCardTrigger.svelte\";\nimport { getContext, setContext } from \"svelte\";\n\nexport { melt, type HoverCardProps };\n\nconst NAME = \"hovercard\";\n\nexport const ctx = {\n\tset,\n\tget,\n\tgetContent,\n\tgetTrigger: () => get().elements.trigger\n};\n\nfunction getContent() {\n\tconst {\n\t\telements: { content },\n\t\tstates: { open }\n\t} = get();\n\treturn {\n\t\tcontent,\n\t\topen\n\t};\n}\n\nfunction get() {\n\treturn getContext<HoverCardReturn>(NAME);\n}\n\nfunction set(props: HoverCardProps) {\n\tconst hovercard = createHoverCard({ ...props, forceVisible: true });\n\tsetContext(NAME, hovercard);\n}\n\nexport const HoverCard = Object.assign(Root, {\n\tContent,\n\tTrigger\n});\n\nexport {\n\tRoot as HoverCardRoot,\n\tContent as HoverCardTitle,\n\tTrigger as HoverCardTrigger\n};\n"
            }
        ]
    },
    {
        "component": "input",
        "name": "Input",
        "files": [
            {
                "name": "Input.svelte",
                "dir": "input",
                "content": "<script lang=\"ts\">\n\timport type { HTMLInputAttributes } from \"svelte/elements\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\n\texport let value: HTMLInputAttributes[\"value\"] = undefined;\n\texport { className as class };\n</script>\n\n<input\n\tclass={cn(\n\t\t\"flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n\t\tclassName\n\t)}\n\tbind:value\n\ton:blur\n\ton:change\n\ton:click\n\ton:focus\n\ton:keydown\n\ton:keypress\n\ton:keyup\n\ton:mouseover\n\ton:mouseenter\n\ton:mouseleave\n\ton:paste\n\ton:input\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "index.ts",
                "dir": "input",
                "content": "export { default as Input } from \"./Input.svelte\";\n"
            }
        ]
    },
    {
        "component": "label",
        "name": "Label",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Label.svelte",
                "dir": "label",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst label = ctx.getLabel();\n</script>\n\n<label\n\tuse:melt={$label}\n\tclass={cn(\n\t\t\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</label>\n"
            },
            {
                "name": "index.ts",
                "dir": "label",
                "content": "import { createLabel, melt } from \"@melt-ui/svelte\";\n\nexport { default as Label } from \"./Label.svelte\";\nexport { melt };\n\nexport const ctx = {\n\tgetLabel: () => {\n\t\tconst {\n\t\t\telements: { root: label }\n\t\t} = createLabel();\n\t\treturn label;\n\t}\n};\n"
            }
        ]
    },
    {
        "component": "progress",
        "name": "Progress",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Progress.svelte",
                "dir": "progress",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { writable } from \"svelte/store\";\n\timport { melt, ctx, type ProgressProps } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let max: ProgressProps[\"max\"] = 100;\n\texport let defaultValue: ProgressProps[\"defaultValue\"] = undefined;\n\texport let value: ProgressProps[\"value\"] = writable(defaultValue);\n\texport let onValueChange: ProgressProps[\"onValueChange\"] = undefined;\n\n\tconst progress = ctx.getProgress({\n\t\tmax,\n\t\tvalue,\n\t\tdefaultValue,\n\t\tonValueChange\n\t});\n</script>\n\n<div\n\tuse:melt={$progress}\n\tclass={cn(\n\t\t\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<div\n\t\tclass=\"h-full w-full flex-1 bg-primary transition-all\"\n\t\tstyle={`transform: translateX(-${\n\t\t\t100 - (100 * ($value ?? 0)) / (max ?? 1)\n\t\t}%)`}\n\t/>\n</div>\n"
            },
            {
                "name": "index.ts",
                "dir": "progress",
                "content": "import {\n\tcreateProgress,\n\ttype CreateProgressProps as ProgressProps,\n\tmelt\n} from \"@melt-ui/svelte\";\nexport { melt, ProgressProps };\nexport { default as Progress } from \"./Progress.svelte\";\n\nexport const ctx = {\n\tgetProgress: (props: ProgressProps) => {\n\t\tconst {\n\t\t\telements: { root }\n\t\t} = createProgress(props);\n\n\t\treturn root;\n\t}\n};\n"
            }
        ]
    },
    {
        "component": "radio-group",
        "name": "Radio Group",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "RadioGroup.svelte",
                "dir": "radio-group",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport { melt, ctx, type RadioGroupProps } from \".\";\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let required: RadioGroupProps[\"required\"] = undefined;\n\texport let disabled: RadioGroupProps[\"disabled\"] = undefined;\n\texport let defaultValue: RadioGroupProps[\"defaultValue\"] = undefined;\n\texport let value: RadioGroupProps[\"value\"] = undefined;\n\texport let onValueChange: RadioGroupProps[\"onValueChange\"] = undefined;\n\texport let loop: RadioGroupProps[\"loop\"] = undefined;\n\texport let orientation: RadioGroupProps[\"orientation\"] = undefined;\n\n\tconst root = ctx.set({\n\t\trequired,\n\t\tdisabled,\n\t\tdefaultValue,\n\t\tvalue,\n\t\tonValueChange,\n\t\tloop,\n\t\torientation\n\t});\n</script>\n\n<div use:melt={$root} class={cn(\"grid gap-2\", className)} {...$$restProps}>\n\t<slot />\n</div>\n"
            },
            {
                "name": "RadioGroupItem.svelte",
                "dir": "radio-group",
                "content": "<script lang=\"ts\">\n\timport { Circle } from \"lucide-svelte\";\n\timport { cn } from \"$lib/utils\";\n\timport { ctx, melt, type RadioGroupItemProps } from \".\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let value: RadioGroupItemProps[\"value\"];\n\texport let disabled: RadioGroupItemProps[\"disabled\"] = undefined;\n\n\tconst { item, isChecked } = ctx.getItem();\n</script>\n\n<button\n\tuse:melt={$item({ value, disabled })}\n\tclass={cn(\n\t\t\"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<div class=\"flex items-center justify-center\">\n\t\t{#if $isChecked(value)}\n\t\t\t<Circle class=\"h-2.5 w-2.5 fill-current text-current\" />\n\t\t{/if}\n\t</div>\n</button>\n"
            },
            {
                "name": "index.ts",
                "dir": "radio-group",
                "content": "import {\n\tcreateRadioGroup,\n\tmelt,\n\ttype RadioGroupItemProps as ItemProps,\n\ttype CreateRadioGroupProps as RadioGroupProps,\n\ttype RadioGroup as RadioGroupReturn\n} from \"@melt-ui/svelte\";\nimport { getContext, setContext } from \"svelte\";\nimport Root from \"./RadioGroup.svelte\";\nimport Item from \"./RadioGroupItem.svelte\";\nimport Input from \"./RadioGroupInput.svelte\";\n\ntype ObjectVariation<T> = T extends object ? T : never;\nconst NAME = \"radiogroup\";\n\nexport const ctx = {\n\tset,\n\tget,\n\tgetItem,\n\tgetInput: () => get().elements.itemInput\n};\n\nfunction set(props: RadioGroupProps) {\n\tconst radioGroup = createRadioGroup(props);\n\tsetContext(NAME, radioGroup);\n\tconst {\n\t\telements: { root }\n\t} = radioGroup;\n\treturn root;\n}\n\nfunction get() {\n\treturn getContext<RadioGroupReturn>(NAME);\n}\n\nfunction getItem() {\n\tconst {\n\t\telements: { item },\n\t\thelpers: { isChecked }\n\t} = get();\n\treturn { item, isChecked };\n}\n\nexport { melt, RadioGroupProps };\nexport type RadioGroupItemProps = ObjectVariation<ItemProps>;\nexport const RadioGroup = Object.assign(Root, {\n\tItem,\n\tInput\n});\n\nexport {\n\tRoot as RadioGroupRoot,\n\tItem as RadioGroupItem,\n\tInput as RadioGroupInput\n};\n"
            }
        ]
    },
    {
        "component": "separator",
        "name": "Separator",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Separator.svelte",
                "dir": "separator",
                "content": "<script lang=\"ts\">\n\timport type { SeparatorRootProps } from \"radix-svelte\";\n\timport { Separator } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\texport let orientation: SeparatorRootProps[\"orientation\"] = \"horizontal\";\n\texport let decorative: SeparatorRootProps[\"decorative\"] = true;\n</script>\n\n<Separator.Root\n\t{orientation}\n\t{decorative}\n\tclass={cn(\n\t\t\"shrink-0 bg-border\",\n\t\torientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "index.ts",
                "dir": "separator",
                "content": "export { default as Separator } from \"./Separator.svelte\";\n"
            }
        ]
    },
    {
        "component": "sheet",
        "name": "Sheet",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "SheetContent.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport type { VariantProps } from \"class-variance-authority\";\n\timport { X } from \"lucide-svelte\";\n\timport { Dialog as SheetPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\timport { sheetVariants } from \".\";\n\timport SheetOverlay from \"./SheetOverlay.svelte\";\n\timport SheetPortal from \"./SheetPortal.svelte\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let position: VariantProps<typeof sheetVariants>[\"position\"] =\n\t\t\"right\";\n\texport let size: VariantProps<typeof sheetVariants>[\"size\"] = \"default\";\n</script>\n\n<SheetPortal {position}>\n\t<SheetOverlay />\n\t<SheetPrimitive.Content\n\t\tclass={cn(sheetVariants({ position, size }), className)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t\t<SheetPrimitive.Close\n\t\t\tclass=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\"\n\t\t>\n\t\t\t<X class=\"h-4 w-4\" />\n\t\t\t<span class=\"sr-only\">Close</span>\n\t\t</SheetPrimitive.Close>\n\t</SheetPrimitive.Content>\n</SheetPortal>\n"
            },
            {
                "name": "SheetDescription.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport { Dialog as SheetPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<SheetPrimitive.Description\n\tclass={cn(\"text-sm text-muted-foreground\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</SheetPrimitive.Description>\n"
            },
            {
                "name": "SheetFooter.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\n\t\t\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "SheetHeader.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
            },
            {
                "name": "SheetOverlay.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport { Dialog as SheetPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<SheetPrimitive.Overlay\n\tclass={cn(\n\t\t\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "SheetPortal.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport type { VariantProps } from \"class-variance-authority\";\n\timport { cva } from \"class-variance-authority\";\n\timport { Dialog as SheetPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tconst portalVariants = cva(\"fixed inset-0 z-50 flex\", {\n\t\tvariants: {\n\t\t\tposition: {\n\t\t\t\ttop: \"items-start\",\n\t\t\t\tbottom: \"items-end\",\n\t\t\t\tleft: \"justify-start\",\n\t\t\t\tright: \"justify-end\"\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: { position: \"right\" }\n\t});\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let position: VariantProps<typeof portalVariants>[\"position\"] =\n\t\t\"right\";\n</script>\n\n<SheetPrimitive.Portal class={cn(className)} {...$$restProps}>\n\t<div class={portalVariants({ position })}>\n\t\t<slot />\n\t</div>\n</SheetPrimitive.Portal>\n"
            },
            {
                "name": "SheetTitle.svelte",
                "dir": "sheet",
                "content": "<script lang=\"ts\">\n\timport { Dialog as SheetPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<SheetPrimitive.Title\n\tclass={cn(\"text-lg font-semibold text-foreground\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</SheetPrimitive.Title>\n"
            },
            {
                "name": "index.ts",
                "dir": "sheet",
                "content": "import { cva } from \"class-variance-authority\";\nimport { Dialog as SheetPrimitive } from \"radix-svelte\";\n\nexport { default as SheetContent } from \"./SheetContent.svelte\";\nexport { default as SheetDescription } from \"./SheetDescription.svelte\";\nexport { default as SheetFooter } from \"./SheetFooter.svelte\";\nexport { default as SheetHeader } from \"./SheetHeader.svelte\";\nexport { default as SheetOverlay } from \"./SheetOverlay.svelte\";\nexport { default as SheetPortal } from \"./SheetPortal.svelte\";\nexport { default as SheetTitle } from \"./SheetTitle.svelte\";\n\nexport const Sheet = SheetPrimitive.Root;\nexport const SheetTrigger = SheetPrimitive.Trigger;\nexport const SheetClose = SheetPrimitive.Close;\n\nexport const sheetVariants = cva(\n\t\"fixed z-50 scale-100 gap-4 bg-background p-6 opacity-100 shadow-lg border\",\n\t{\n\t\tvariants: {\n\t\t\tposition: {\n\t\t\t\ttop: \"animate-in slide-in-from-top w-full duration-300\",\n\t\t\t\tbottom: \"animate-in slide-in-from-bottom w-full duration-300\",\n\t\t\t\tleft: \"animate-in slide-in-from-left h-full duration-300\",\n\t\t\t\tright: \"animate-in slide-in-from-right h-full duration-300\"\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tcontent: \"\",\n\t\t\t\tdefault: \"\",\n\t\t\t\tsm: \"\",\n\t\t\t\tlg: \"\",\n\t\t\t\txl: \"\",\n\t\t\t\tfull: \"\"\n\t\t\t}\n\t\t},\n\t\tcompoundVariants: [\n\t\t\t{\n\t\t\t\tposition: [\"top\", \"bottom\"],\n\t\t\t\tsize: \"content\",\n\t\t\t\tclass: \"max-h-screen\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"top\", \"bottom\"],\n\t\t\t\tsize: \"default\",\n\t\t\t\tclass: \"h-1/3\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"top\", \"bottom\"],\n\t\t\t\tsize: \"sm\",\n\t\t\t\tclass: \"h-1/4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"top\", \"bottom\"],\n\t\t\t\tsize: \"lg\",\n\t\t\t\tclass: \"h-1/2\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"top\", \"bottom\"],\n\t\t\t\tsize: \"xl\",\n\t\t\t\tclass: \"h-5/6\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"top\", \"bottom\"],\n\t\t\t\tsize: \"full\",\n\t\t\t\tclass: \"h-screen\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"right\", \"left\"],\n\t\t\t\tsize: \"content\",\n\t\t\t\tclass: \"max-w-screen\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"right\", \"left\"],\n\t\t\t\tsize: \"default\",\n\t\t\t\tclass: \"w-1/3\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"right\", \"left\"],\n\t\t\t\tsize: \"sm\",\n\t\t\t\tclass: \"w-1/4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"right\", \"left\"],\n\t\t\t\tsize: \"lg\",\n\t\t\t\tclass: \"w-1/2\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"right\", \"left\"],\n\t\t\t\tsize: \"xl\",\n\t\t\t\tclass: \"w-5/6\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tposition: [\"right\", \"left\"],\n\t\t\t\tsize: \"full\",\n\t\t\t\tclass: \"w-screen\"\n\t\t\t}\n\t\t],\n\t\tdefaultVariants: {\n\t\t\tposition: \"right\",\n\t\t\tsize: \"default\"\n\t\t}\n\t}\n);\n"
            }
        ]
    },
    {
        "component": "skeleton",
        "name": "Skeleton",
        "files": [
            {
                "name": "Skeleton.svelte",
                "dir": "skeleton",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div\n\tclass={cn(\"animate-pulse rounded-md bg-muted\", className)}\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "index.ts",
                "dir": "skeleton",
                "content": "export { default as Skeleton } from \"./Skeleton.svelte\";\n"
            }
        ]
    },
    {
        "component": "slider",
        "name": "Slider",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Slider.svelte",
                "dir": "slider",
                "content": "<script lang=\"ts\">\n\timport type { SliderRootProps } from \"radix-svelte\";\n\timport { Slider as SliderPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let value: SliderRootProps[\"value\"] = 0;\n</script>\n\n<SliderPrimitive.Root\n\tbind:value\n\tclass={cn(\n\t\t\"relative flex w-full touch-none select-none items-center\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<SliderPrimitive.Track\n\t\tclass=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\"\n\t>\n\t\t<SliderPrimitive.Range class=\"absolute h-full bg-primary\" />\n\t</SliderPrimitive.Track>\n\t<SliderPrimitive.Thumb\n\t\tclass=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\"\n\t/>\n</SliderPrimitive.Root>\n"
            },
            {
                "name": "index.ts",
                "dir": "slider",
                "content": "export { default as Slider } from \"./Slider.svelte\";\n"
            }
        ]
    },
    {
        "component": "switch",
        "name": "Switch",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Switch.svelte",
                "dir": "switch",
                "content": "<script lang=\"ts\">\n\timport type { SwitchRootProps } from \"radix-svelte\";\n\timport { Switch } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let rootChecked: SwitchRootProps[\"checked\"] = undefined;\n\texport let rootRequired: SwitchRootProps[\"required\"] = undefined;\n\texport let rootDisabled: SwitchRootProps[\"disabled\"] = undefined;\n\texport let rootName: SwitchRootProps[\"name\"] = undefined;\n\texport let rootValue: SwitchRootProps[\"value\"] = undefined;\n</script>\n\n<Switch.Root\n\tclass={cn(\n\t\t\"peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n\tbind:checked={rootChecked}\n\tbind:required={rootRequired}\n\tbind:disabled={rootDisabled}\n\tbind:name={rootName}\n\tbind:value={rootValue}\n>\n\t<Switch.Thumb\n\t\tclass={cn(\n\t\t\t\"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n\t\t)}\n\t/>\n</Switch.Root>\n"
            },
            {
                "name": "index.ts",
                "dir": "switch",
                "content": "export { default as Switch } from \"./Switch.svelte\";\n"
            }
        ]
    },
    {
        "component": "table",
        "name": "Table",
        "files": [
            {
                "name": "Table.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<div class=\"w-full overflow-auto\">\n\t<table\n\t\tclass={cn(\"w-full caption-bottom text-sm\", className)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</table>\n</div>\n"
            },
            {
                "name": "TableBody.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<tbody class={cn(\"[&_tr:last-child]:border-0\", className)} {...$$restProps}>\n\t<slot />\n</tbody>\n"
            },
            {
                "name": "TableCaption.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<caption\n\tclass={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</caption>\n"
            },
            {
                "name": "TableCell.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<td\n\tclass={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</td>\n"
            },
            {
                "name": "TableFooter.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<tfoot\n\tclass={cn(\"bg-primary font-medium text-primary-foreground\", className)}\n\t{...$$restProps}\n>\n\t<slot />\n</tfoot>\n"
            },
            {
                "name": "TableHead.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<th\n\tclass={cn(\n\t\t\"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</th>\n"
            },
            {
                "name": "TableHeader.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<thead class={cn(\"[&_tr]:border-b\", className)} {...$$restProps}>\n\t<slot />\n</thead>\n"
            },
            {
                "name": "TableRow.svelte",
                "dir": "table",
                "content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<tr\n\tclass={cn(\n\t\t\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</tr>\n"
            },
            {
                "name": "index.ts",
                "dir": "table",
                "content": "export { default as Table } from \"./Table.svelte\";\nexport { default as TableBody } from \"./TableBody.svelte\";\nexport { default as TableCaption } from \"./TableCaption.svelte\";\nexport { default as TableCell } from \"./TableCell.svelte\";\nexport { default as TableFooter } from \"./TableFooter.svelte\";\nexport { default as TableHead } from \"./TableHead.svelte\";\nexport { default as TableHeader } from \"./TableHeader.svelte\";\nexport { default as TableRow } from \"./TableRow.svelte\";\n"
            }
        ]
    },
    {
        "component": "tabs",
        "name": "Tabs",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "TabsContent.svelte",
                "dir": "tabs",
                "content": "<script lang=\"ts\">\n\timport type { TabsContentProps } from \"radix-svelte\";\n\timport { Tabs as TabsPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let value: TabsContentProps[\"value\"];\n</script>\n\n<TabsPrimitive.Content\n\tclass={cn(\n\t\t\"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n\t\tclassName\n\t)}\n\t{value}\n\t{...$$restProps}\n>\n\t<slot />\n</TabsPrimitive.Content>\n"
            },
            {
                "name": "TabsList.svelte",
                "dir": "tabs",
                "content": "<script lang=\"ts\">\n\timport { Tabs as TabsPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<TabsPrimitive.List\n\tclass={cn(\n\t\t\"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n\t\tclassName\n\t)}\n\t{...$$restProps}\n>\n\t<slot />\n</TabsPrimitive.List>\n"
            },
            {
                "name": "TabsTrigger.svelte",
                "dir": "tabs",
                "content": "<script lang=\"ts\">\n\timport type { TabsTriggerProps } from \"radix-svelte\";\n\timport { Tabs as TabsPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let value: TabsTriggerProps[\"value\"];\n</script>\n\n<TabsPrimitive.Trigger\n\tclass={cn(\n\t\t\"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n\t\tclassName\n\t)}\n\t{value}\n\t{...$$restProps}\n>\n\t<slot />\n</TabsPrimitive.Trigger>\n"
            },
            {
                "name": "index.ts",
                "dir": "tabs",
                "content": "import { Tabs as TabsPrimitive } from \"radix-svelte\";\n\nexport { default as TabsContent } from \"./TabsContent.svelte\";\nexport { default as TabsList } from \"./TabsList.svelte\";\nexport { default as TabsTrigger } from \"./TabsTrigger.svelte\";\n\nexport const Tabs = TabsPrimitive.Root;\n"
            }
        ]
    },
    {
        "component": "textarea",
        "name": "Textarea",
        "files": [
            {
                "name": "Textarea.svelte",
                "dir": "textarea",
                "content": "<script lang=\"ts\">\n\timport type { HTMLTextareaAttributes } from \"svelte/elements\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\n\texport let value: HTMLTextareaAttributes[\"value\"] = undefined;\n\texport { className as class };\n</script>\n\n<textarea\n\tclass={cn(\n\t\t\"flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n\t\tclassName\n\t)}\n\tbind:value\n\ton:blur\n\ton:change\n\ton:click\n\ton:focus\n\ton:keydown\n\ton:keypress\n\ton:keyup\n\ton:mouseover\n\ton:mouseenter\n\ton:mouseleave\n\ton:paste\n\ton:input\n\t{...$$restProps}\n/>\n"
            },
            {
                "name": "index.ts",
                "dir": "textarea",
                "content": "export { default as Textarea } from \"./Textarea.svelte\";\n"
            }
        ]
    },
    {
        "component": "toggle",
        "name": "Toggle",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "Toggle.svelte",
                "dir": "toggle",
                "content": "<script lang=\"ts\">\n\timport type { VariantProps } from \"class-variance-authority\";\n\timport type { ToggleRootProps } from \"radix-svelte\";\n\timport { cva } from \"class-variance-authority\";\n\timport { Toggle as TogglePrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tconst toggleVariants = cva(\n\t\t\"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors data-[state=on]:bg-accent data-[state=on]:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ring-offset-background hover:bg-muted hover:text-muted-foreground\",\n\t\t{\n\t\t\tvariants: {\n\t\t\t\tvariant: {\n\t\t\t\t\tdefault: \"bg-transparent\",\n\t\t\t\t\toutline:\n\t\t\t\t\t\t\"bg-transparent border border-input hover:bg-accent hover:text-accent-foreground\"\n\t\t\t\t},\n\t\t\t\tsize: {\n\t\t\t\t\tdefault: \"h-10 px-3\",\n\t\t\t\t\tsm: \"h-9 px-2.5\",\n\t\t\t\t\tlg: \"h-11 px-5\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tdefaultVariants: {\n\t\t\t\tvariant: \"default\",\n\t\t\t\tsize: \"default\"\n\t\t\t}\n\t\t}\n\t);\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let variant: VariantProps<typeof toggleVariants>[\"variant\"] =\n\t\t\"default\";\n\texport let size: VariantProps<typeof toggleVariants>[\"size\"] = \"default\";\n\texport let pressed: ToggleRootProps[\"disabled\"] = false;\n\texport let disabled: ToggleRootProps[\"disabled\"] = false;\n</script>\n\n<TogglePrimitive.Root\n\tclass={cn(toggleVariants({ variant, size, className }))}\n\tbind:pressed\n\tbind:disabled\n\t{...$$restProps}\n>\n\t<slot />\n</TogglePrimitive.Root>\n"
            },
            {
                "name": "index.ts",
                "dir": "toggle",
                "content": "export { default as Toggle } from \"./Toggle.svelte\";\n"
            }
        ]
    },
    {
        "component": "tooltip",
        "name": "Tooltip",
        "dependencies": [
            "radix-svelte"
        ],
        "files": [
            {
                "name": "TooltipContent.svelte",
                "dir": "tooltip",
                "content": "<script lang=\"ts\">\n\timport type { TooltipContentProps } from \"radix-svelte/index\";\n\timport { Tooltip as TooltipPrimitive } from \"radix-svelte\";\n\timport { cn } from \"$lib/utils\";\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\texport let sideOffset: TooltipContentProps[\"sideOffset\"] = 4;\n</script>\n\n<TooltipPrimitive.Portal>\n\t<TooltipPrimitive.Content\n\t\t{sideOffset}\n\t\tclass={cn(\n\t\t\t\"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-50 data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1\",\n\t\t\tclassName\n\t\t)}\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</TooltipPrimitive.Content>\n</TooltipPrimitive.Portal>\n"
            },
            {
                "name": "index.ts",
                "dir": "tooltip",
                "content": "import { Tooltip as TooltipPrimitive } from \"radix-svelte\";\n\nexport { default as TooltipContent } from \"./TooltipContent.svelte\";\nexport const TooltipProvider = TooltipPrimitive.Provider;\nexport const Tooltip = TooltipPrimitive.Root;\nexport const TooltipTrigger = TooltipPrimitive.Trigger;\n"
            }
        ]
    }
]