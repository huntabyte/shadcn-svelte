{
	"name": "carousel",
	"dependencies": [
		"embla-carousel-svelte"
	],
	"registryDependencies": [
		"index.js"
	],
	"files": [
		{
			"name": "carousel-content.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { getEmblaContext } from \"./context.js\";\n\timport emblaCarouselSvelte from \"embla-carousel-svelte\";\n\n\ttype $$Props = HTMLAttributes<HTMLDivElement>;\n\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst { orientation, options, plugins, onInit } = getEmblaContext(\"<Carousel.Content/>\");\n</script>\n\n<div\n\tclass=\"overflow-hidden\"\n\tuse:emblaCarouselSvelte={{\n\t\toptions: {\n\t\t\tcontainer: \"[data-embla-container]\",\n\t\t\tslides: \"[data-embla-slide]\",\n\t\t\t...$options,\n\t\t\taxis: $orientation === \"horizontal\" ? \"x\" : \"y\",\n\t\t},\n\t\tplugins: $plugins,\n\t}}\n\ton:emblaInit={onInit}\n>\n\t<div\n\t\tclass={cn(\"flex\", $orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className)}\n\t\tdata-embla-container=\"\"\n\t\t{...$$restProps}\n\t>\n\t\t<slot />\n\t</div>\n</div>\n"
		},
		{
			"name": "carousel-item.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { getEmblaContext } from \"./context.js\";\n\n\ttype $$Props = HTMLAttributes<HTMLDivElement>;\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n\n\tconst { orientation } = getEmblaContext(\"<Carousel.Item/>\");\n</script>\n\n<div\n\trole=\"group\"\n\taria-roledescription=\"slide\"\n\tclass={cn(\n\t\t\"min-w-0 shrink-0 grow-0 basis-full\",\n\t\t$orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n\t\tclassName\n\t)}\n\tdata-embla-slide=\"\"\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
		},
		{
			"name": "carousel-next.svelte",
			"content": "<script lang=\"ts\">\n\timport { Button, type Props, buttonVariants } from \"@/registry/new-york/ui/button/index.js\";\n\timport { cn } from \"$lib/utils\";\n\timport { ArrowRight } from \"radix-icons-svelte\";\n\timport type { VariantProps } from \"tailwind-variants\";\n\timport { getEmblaContext } from \"./context.js\";\n\n\ttype $$Props = Props;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n\texport let variant: VariantProps<typeof buttonVariants>[\"variant\"] = \"outline\";\n\texport let size: VariantProps<typeof buttonVariants>[\"size\"] = \"icon\";\n\n\tconst { orientation, canScrollNext, scrollNext, handleKeyDown } =\n\t\tgetEmblaContext(\"<Carousel.Next/>\");\n</script>\n\n<Button\n\t{variant}\n\t{size}\n\tclass={cn(\n\t\t\"absolute h-8 w-8 rounded-full touch-manipulation\",\n\t\t$orientation === \"horizontal\"\n\t\t\t? \"-right-12 top-1/2 -translate-y-1/2\"\n\t\t\t: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\tclassName\n\t)}\n\tdisabled={!$canScrollNext}\n\ton:click={scrollNext}\n\ton:keydown={handleKeyDown}\n\t{...$$restProps}\n>\n\t<ArrowRight class=\"h-4 w-4\" />\n\t<span class=\"sr-only\">Next slide</span>\n</Button>\n"
		},
		{
			"name": "carousel-previous.svelte",
			"content": "<script lang=\"ts\">\n\timport { Button, type Props, buttonVariants } from \"@/registry/new-york/ui/button/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { ArrowLeft } from \"radix-icons-svelte\";\n\timport type { VariantProps } from \"tailwind-variants\";\n\timport { getEmblaContext } from \"./context.js\";\n\n\ttype $$Props = Props;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n\texport let variant: VariantProps<typeof buttonVariants>[\"variant\"] = \"outline\";\n\texport let size: VariantProps<typeof buttonVariants>[\"size\"] = \"icon\";\n\n\tconst { orientation, canScrollPrev, scrollPrev, handleKeyDown } =\n\t\tgetEmblaContext(\"<Carousel.Previous/>\");\n</script>\n\n<Button\n\t{variant}\n\t{size}\n\tclass={cn(\n\t\t\"absolute h-8 w-8 rounded-full touch-manipulation\",\n\t\t$orientation === \"horizontal\"\n\t\t\t? \"-left-12 top-1/2 -translate-y-1/2\"\n\t\t\t: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\tclassName\n\t)}\n\tdisabled={!$canScrollPrev}\n\ton:click={scrollPrev}\n\ton:keydown={handleKeyDown}\n\t{...$$restProps}\n>\n\t<ArrowLeft class=\"h-4 w-4\" />\n\t<span class=\"sr-only\">Previous slide</span>\n</Button>\n"
		},
		{
			"name": "carousel.svelte",
			"content": "<script lang=\"ts\">\n\timport { setEmblaContex, type CarouselProps, type CarouselAPI } from \"./context.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { writable } from \"svelte/store\";\n\timport { onDestroy } from \"svelte\";\n\n\ttype $$Props = CarouselProps;\n\n\texport let opts = {};\n\texport let plugins: NonNullable<$$Props[\"plugins\"]> = [];\n\texport let api: $$Props[\"api\"] = undefined;\n\texport let orientation: NonNullable<$$Props[\"orientation\"]> = \"horizontal\";\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n\n\tconst apiStore = writable<CarouselAPI | undefined>(undefined);\n\tconst orientationStore = writable(orientation);\n\tconst canScrollPrev = writable(false);\n\tconst canScrollNext = writable(false);\n\tconst optionsStore = writable(opts);\n\tconst pluginStore = writable(plugins);\n\n\t$: orientationStore.set(orientation);\n\t$: pluginStore.set(plugins);\n\t$: optionsStore.set(opts);\n\n\tfunction scrollPrev() {\n\t\tapi?.scrollPrev();\n\t}\n\tfunction scrollNext() {\n\t\tapi?.scrollNext();\n\t}\n\n\tfunction onSelect(api: CarouselAPI) {\n\t\tif (!api) return;\n\t\tcanScrollPrev.set(api.canScrollPrev());\n\t\tcanScrollNext.set(api.canScrollNext());\n\t}\n\n\t$: if (api) {\n\t\tonSelect(api);\n\t\tapi.on(\"select\", onSelect);\n\t\tapi.on(\"reInit\", onSelect);\n\t}\n\n\tfunction handleKeyDown(e: KeyboardEvent) {\n\t\tif (e.key === \"ArrowLeft\") {\n\t\t\te.preventDefault();\n\t\t\tscrollPrev();\n\t\t} else if (e.key === \"ArrowRight\") {\n\t\t\te.preventDefault();\n\t\t\tscrollNext();\n\t\t}\n\t}\n\n\tsetEmblaContex({\n\t\tapi: apiStore,\n\t\tscrollPrev,\n\t\tscrollNext,\n\t\torientation: orientationStore,\n\t\tcanScrollNext,\n\t\tcanScrollPrev,\n\t\thandleKeyDown,\n\t\toptions: optionsStore,\n\t\tplugins: pluginStore,\n\t\tonInit,\n\t});\n\n\tfunction onInit(event: CustomEvent<CarouselAPI>) {\n\t\tapi = event.detail;\n\t\tapiStore.set(api);\n\t}\n\n\tonDestroy(() => {\n\t\tapi?.off(\"select\", onSelect);\n\t});\n</script>\n\n<div\n\tclass={cn(\"relative\", className)}\n\ton:mouseenter\n\ton:mouseleave\n\trole=\"region\"\n\taria-roledescription=\"carousel\"\n\t{...$$restProps}\n>\n\t<slot />\n</div>\n"
		},
		{
			"name": "context.ts",
			"content": "import type { EmblaCarouselSvelteType } from \"embla-carousel-svelte\";\nimport type emblaCarouselSvelte from \"embla-carousel-svelte\";\nimport { getContext, hasContext, setContext } from \"svelte\";\nimport type { HTMLAttributes } from \"svelte/elements\";\nimport type { Writable, Readable } from \"svelte/store\";\n\nexport type CarouselAPI = NonNullable<\n\tNonNullable<EmblaCarouselSvelteType[\"$$_attributes\"]>[\"on:emblaInit\"]\n> extends (evt: CustomEvent<infer CarouselAPI>) => void\n\t? CarouselAPI\n\t: never;\n\ntype EmblaCarouselConfig = NonNullable<Parameters<typeof emblaCarouselSvelte>[1]>;\n\nexport type CarouselOptions = EmblaCarouselConfig[\"options\"];\nexport type CarouselPlugins = EmblaCarouselConfig[\"plugins\"];\n\n////\n\nexport type CarouselProps = {\n\topts?: CarouselOptions;\n\tplugins?: CarouselPlugins;\n\tapi?: CarouselAPI;\n\torientation?: \"horizontal\" | \"vertical\";\n} & HTMLAttributes<HTMLDivElement>;\n\nconst EMBLA_CAROUSEL_CONTEXT = Symbol(\"EMBLA_CAROUSEL_CONTEXT\");\n\ntype EmblaContext = {\n\tapi: Writable<CarouselAPI | undefined>;\n\torientation: Writable<\"horizontal\" | \"vertical\">;\n\tscrollNext: () => void;\n\tscrollPrev: () => void;\n\tcanScrollNext: Readable<boolean>;\n\tcanScrollPrev: Readable<boolean>;\n\thandleKeyDown: (e: KeyboardEvent) => void;\n\toptions: Writable<CarouselOptions>;\n\tplugins: Writable<CarouselPlugins>;\n\tonInit: (e: CustomEvent<CarouselAPI>) => void;\n};\n\nexport function setEmblaContex(config: EmblaContext): EmblaContext {\n\tsetContext(EMBLA_CAROUSEL_CONTEXT, config);\n\treturn config;\n}\n\nexport function getEmblaContext(name = \"This component\") {\n\tif (!hasContext(EMBLA_CAROUSEL_CONTEXT)) {\n\t\tthrow new Error(`${name} must be used within a <Carousel.Root> component`);\n\t}\n\treturn getContext<ReturnType<typeof setEmblaContex>>(EMBLA_CAROUSEL_CONTEXT);\n}\n"
		},
		{
			"name": "index.ts",
			"content": "export { default as Root } from \"./carousel.svelte\";\nexport { default as Content } from \"./carousel-content.svelte\";\nexport { default as Item } from \"./carousel-item.svelte\";\nexport { default as Previous } from \"./carousel-previous.svelte\";\nexport { default as Next } from \"./carousel-next.svelte\";\n"
		}
	],
	"type": "components:ui"
}