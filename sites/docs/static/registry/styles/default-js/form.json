{
	"name": "form",
	"dependencies": [
		"formsnap",
		"zod",
		"sveltekit-superforms",
		"bits-ui"
	],
	"registryDependencies": [
		"button",
		"label"
	],
	"files": [
		{
			"name": "form-button.svelte",
			"content": "<script>\n\timport * as Button from \"$lib/registry/default/ui/button/index.js\";\n\n\tlet { ref = $bindable(null), ...restProps }: Button.Props = $props();\n</script>\n\n<Button.Root bind:ref type=\"submit\" {...restProps} />\n"
		},
		{
			"name": "form-description.svelte",
			"content": "<script>\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { WithoutChild } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\t...restProps\n\t}: WithoutChild<FormPrimitive.DescriptionProps> = $props();\n</script>\n\n<FormPrimitive.Description\n\tbind:ref\n\tclass={cn(\"text-muted-foreground text-sm\", className)}\n\t{...restProps}\n/>\n"
		},
		{
			"name": "form-element-field.svelte",
			"content": "<script lang=\"ts\" module>\n\timport type { FormPathLeaves as _FormPathLeaves } from \"sveltekit-superforms\";\n\ttype T = Record<string, unknown>;\n\ttype U = _FormPathLeaves<T>;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends _FormPathLeaves<T>\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tform,\n\t\tname,\n\t\tchildren: childrenProp,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLDivElement>> &\n\t\tFormPrimitive.ElementFieldProps<T, U> = $props();\n</script>\n\n<FormPrimitive.ElementField {form} {name}>\n\t{#snippet children({ constraints, errors, tainted, value })}\n\t\t<div bind:this={ref} class={cn(\"space-y-2\", className)} {...restProps}>\n\t\t\t{@render childrenProp?.({ constraints, errors, tainted, value: value as T[U] })}\n\t\t</div>\n\t{/snippet}\n</FormPrimitive.ElementField>\n"
		},
		{
			"name": "form-field-errors.svelte",
			"content": "<script>\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { WithoutChild } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\terrorClasses,\n\t\tchildren: childrenProp,\n\t\t...restProps\n\t}: WithoutChild<FormPrimitive.FieldErrorsProps> & {\n\t\terrorClasses?: string | undefined | null;\n\t} = $props();\n</script>\n\n<FormPrimitive.FieldErrors\n\tbind:ref\n\tclass={cn(\"text-destructive text-sm font-medium\", className)}\n\t{...restProps}\n>\n\t{#snippet children({ errors, errorProps })}\n\t\t{#if childrenProp}\n\t\t\t{@render childrenProp({ errors, errorProps })}\n\t\t{:else}\n\t\t\t{#each errors as error}\n\t\t\t\t<div {...errorProps} class={cn(errorClasses)}>{error}</div>\n\t\t\t{/each}\n\t\t{/if}\n\t{/snippet}\n</FormPrimitive.FieldErrors>\n"
		},
		{
			"name": "form-field.svelte",
			"content": "<script lang=\"ts\" module>\n\timport type { FormPath as _FormPath } from \"sveltekit-superforms\";\n\ttype T = Record<string, unknown>;\n\ttype U = _FormPath<T>;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends _FormPath<T>\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { WithoutChildren } from \"bits-ui\";\n\timport { type PrimitiveDivAttributes, cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tform,\n\t\tname,\n\t\tchildren: childrenProp,\n\t\t...restProps\n\t}: FormPrimitive.FieldProps<T, U> & WithoutChildren<PrimitiveDivAttributes> = $props();\n</script>\n\n<FormPrimitive.Field {form} {name}>\n\t{#snippet children({ constraints, errors, tainted, value })}\n\t\t<div bind:this={ref} class={cn(\"space-y-2\", className)} {...restProps}>\n\t\t\t{@render childrenProp?.({ constraints, errors, tainted, value: value as T[U] })}\n\t\t</div>\n\t{/snippet}\n</FormPrimitive.Field>\n"
		},
		{
			"name": "form-fieldset.svelte",
			"content": "<script lang=\"ts\" module>\n\timport type { FormPath as _FormPath } from \"sveltekit-superforms\";\n\ttype T = Record<string, unknown>;\n\ttype U = _FormPath<T>;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends _FormPath<T>\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { WithoutChild } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tform,\n\t\tname,\n\t\t...restProps\n\t}: WithoutChild<FormPrimitive.FieldsetProps<T, U>> = $props();\n</script>\n\n<FormPrimitive.Fieldset bind:ref {form} {name} class={cn(\"space-y-2\", className)} {...restProps} />\n"
		},
		{
			"name": "form-label.svelte",
			"content": "<script>\n\timport type { WithoutChild } from \"bits-ui\";\n\timport * as FormPrimitive from \"formsnap\";\n\timport { Label } from \"$lib/registry/default/ui/label/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tclass: className,\n\t\t...restProps\n\t}: WithoutChild<FormPrimitive.LabelProps> = $props();\n</script>\n\n<FormPrimitive.Label {...restProps} bind:ref>\n\t{#snippet child({ props })}\n\t\t<Label {...props} class={cn(\"data-[fs-error]:text-destructive\", className)}>\n\t\t\t{@render children?.()}\n\t\t</Label>\n\t{/snippet}\n</FormPrimitive.Label>\n"
		},
		{
			"name": "form-legend.svelte",
			"content": "<script>\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { WithoutChild } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\t...restProps\n\t}: WithoutChild<FormPrimitive.LegendProps> = $props();\n</script>\n\n<FormPrimitive.Legend\n\tbind:ref\n\tclass={cn(\"data-[fs-error]:text-destructive text-sm font-medium leading-none\", className)}\n\t{...restProps}\n/>\n"
		},
		{
			"name": "index.js",
			"content": "import * as FormPrimitive from \"formsnap\";\nimport Description from \"./form-description.svelte\";\nimport Label from \"./form-label.svelte\";\nimport FieldErrors from \"./form-field-errors.svelte\";\nimport Field from \"./form-field.svelte\";\nimport Fieldset from \"./form-fieldset.svelte\";\nimport Legend from \"./form-legend.svelte\";\nimport ElementField from \"./form-element-field.svelte\";\nimport Button from \"./form-button.svelte\";\nconst Control = FormPrimitive.Control;\nexport { Field, Control, Label, Button, FieldErrors, Description, Fieldset, Legend, ElementField, \n//\nField as FormField, Control as FormControl, Description as FormDescription, Label as FormLabel, FieldErrors as FormFieldErrors, Fieldset as FormFieldset, Legend as FormLegend, ElementField as FormElementField, Button as FormButton, };\n"
		}
	],
	"type": "components:ui"
}