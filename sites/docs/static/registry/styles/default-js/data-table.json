{
	"name": "data-table",
	"dependencies": [],
	"registryDependencies": [],
	"files": [
		{
			"name": "data-table.svelte.js",
			"content": "import { createTable, } from \"@tanstack/table-core\";\n/**\n * Creates a reactive TanStack table object for Svelte.\n * @param options Table options to create the table with.\n * @returns A reactive table object.\n * @example\n * ```svelte\n * <script>\n *   const table = createSvelteTable({ ... })\n * </script>\n *\n * <table>\n *   <thead>\n *     {#each table.getHeaderGroups() as headerGroup}\n *       <tr>\n *         {#each headerGroup.headers as header}\n *           <th colspan={header.colSpan}>\n *         \t   <FlexRender content={header.column.columnDef.header} context={header.getContext()} />\n *         \t </th>\n *         {/each}\n *       </tr>\n *     {/each}\n *   </thead>\n * \t <!-- ... -->\n * </table>\n * ```\n */\nexport function createSvelteTable(options) {\n    const resolvedOptions = mergeObjects({\n        state: {},\n        onStateChange() { },\n        renderFallbackValue: null,\n        mergeOptions: (defaultOptions, options) => {\n            return mergeObjects(defaultOptions, options);\n        },\n    }, options);\n    const table = createTable(resolvedOptions);\n    let state = $state(table.initialState);\n    function updateOptions() {\n        table.setOptions((prev) => {\n            return mergeObjects(prev, options, {\n                state: mergeObjects(state, options.state || {}),\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onStateChange: (updater) => {\n                    if (updater instanceof Function)\n                        state = updater(state);\n                    else\n                        state = mergeObjects(state, updater);\n                    options.onStateChange?.(updater);\n                },\n            });\n        });\n    }\n    updateOptions();\n    $effect.pre(() => {\n        updateOptions();\n    });\n    return table;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction mergeObjects(...sources) {\n    const target = {};\n    for (let i = 0; i < sources.length; i++) {\n        let source = sources[i];\n        if (typeof source === \"function\")\n            source = source();\n        if (source) {\n            const descriptors = Object.getOwnPropertyDescriptors(source);\n            for (const key in descriptors) {\n                if (key in target)\n                    continue;\n                Object.defineProperty(target, key, {\n                    enumerable: true,\n                    get() {\n                        for (let i = sources.length - 1; i >= 0; i--) {\n                            let s = sources[i];\n                            if (typeof s === \"function\")\n                                s = s();\n                            const v = (s || {})[key];\n                            if (v !== undefined)\n                                return v;\n                        }\n                    },\n                });\n            }\n        }\n    }\n    return target;\n}\n"
		},
		{
			"name": "flex-render.svelte",
			"content": "<script lang=\"ts\" module>\n\timport type { CellContext, ColumnDefTemplate, HeaderContext } from \"@tanstack/table-core\";\n\timport {\n\t\tRenderComponentConfig,\n\t\tRenderSnippetConfig,\n\t} from \"$lib/registry/default/ui/data-table/render-helpers.js\";\n\ttype TData = unknown;\n\ttype TValue = unknown;\n\ttype TContext = unknown;\n</script>\n\n<script\n\tlang=\"ts\"\n\tgenerics=\"TData, TValue, TContext extends HeaderContext<TData, TValue> | CellContext<TData, TValue>\"\n>\n\ttype Props = {\n\t\t/** The cell or header field of the current cell's column definition. */\n\t\tcontent?: TContext extends HeaderContext<TData, TValue>\n\t\t\t? ColumnDefTemplate<HeaderContext<TData, TValue>>\n\t\t\t: TContext extends CellContext<TData, TValue>\n\t\t\t\t? ColumnDefTemplate<CellContext<TData, TValue>>\n\t\t\t\t: never;\n\t\t/** The result of the `getContext()` function of the header or cell */\n\t\tcontext: TContext;\n\t};\n\n\tlet { content, context }: Props = $props();\n</script>\n\n{#if typeof content === \"string\"}\n\t{content}\n{:else if content instanceof Function}\n\t<!-- It's unlikely that a CellContext will be passed to a Header -->\n\t<!-- eslint-disable-next-line @typescript-eslint/no-explicit-any -->\n\t{@const result = content(context as any)}\n\t{#if result instanceof RenderComponentConfig}\n\t\t{@const { component: Component, props } = result}\n\t\t<Component {...props} />\n\t{:else if result instanceof RenderSnippetConfig}\n\t\t{@const { snippet, params } = result}\n\t\t{@render snippet(params)}\n\t{:else}\n\t\t{result}\n\t{/if}\n{/if}\n"
		},
		{
			"name": "index.js",
			"content": "export { default as FlexRender } from \"./flex-render.svelte\";\nexport { renderComponent, renderSnippet } from \"./render-helpers.js\";\nexport { createSvelteTable } from \"./data-table.svelte.js\";\n"
		},
		{
			"name": "render-helpers.js",
			"content": "/**\n * A helper class to make it easy to identify Svelte components in\n * `columnDef.cell` and `columnDef.header` properties.\n *\n * > NOTE: This class should only be used internally by the adapter. If you're\n * reading this and you don't know what this is for, you probably don't need it.\n *\n * @example\n * ```svelte\n * {@const result = content(context as any)}\n * {#if result instanceof RenderComponentConfig}\n *   {@const { component: Component, props } = result}\n *   <Component {...props} />\n * {/if}\n * ```\n */\nexport class RenderComponentConfig {\n    component;\n    props;\n    constructor(component, props = {}) {\n        this.component = component;\n        this.props = props;\n    }\n}\n/**\n * A helper class to make it easy to identify Svelte Snippets in `columnDef.cell` and `columnDef.header` properties.\n *\n * > NOTE: This class should only be used internally by the adapter. If you're\n * reading this and you don't know what this is for, you probably don't need it.\n *\n * @example\n * ```svelte\n * {@const result = content(context as any)}\n * {#if result instanceof RenderSnippetConfig}\n *   {@const { snippet, params } = result}\n *   {@render snippet(params)}\n * {/if}\n * ```\n */\nexport class RenderSnippetConfig {\n    snippet;\n    params;\n    constructor(snippet, params) {\n        this.snippet = snippet;\n        this.params = params;\n    }\n}\n/**\n * A helper function to help create cells from Svelte components through ColumnDef's `cell` and `header` properties.\n *\n * This is only to be used with Svelte Components - use `renderSnippet` for Svelte Snippets.\n *\n * @param component A Svelte component\n * @param props The props to pass to `component`\n * @returns A `RenderComponentConfig` object that helps svelte-table know how to render the header/cell component.\n * @example\n * ```ts\n * // +page.svelte\n * const defaultColumns = [\n *   columnHelper.accessor('name', {\n *     header: header => renderComponent(SortHeader, { label: 'Name', header }),\n *   }),\n *   columnHelper.accessor('state', {\n *     header: header => renderComponent(SortHeader, { label: 'State', header }),\n *   }),\n * ]\n * ```\n * @see {@link https://tanstack.com/table/latest/docs/guide/column-defs}\n */\nexport function renderComponent(component, props) {\n    return new RenderComponentConfig(component, props);\n}\n/**\n * A helper function to help create cells from Svelte Snippets through ColumnDef's `cell` and `header` properties.\n *\n * The snippet must only take one parameter.\n *\n * This is only to be used with Snippets - use `renderComponent` for Svelte Components.\n *\n * @param snippet\n * @param params\n * @returns - A `RenderSnippetConfig` object that helps svelte-table know how to render the header/cell snippet.\n * @example\n * ```ts\n * // +page.svelte\n * const defaultColumns = [\n *   columnHelper.accessor('name', {\n *     cell: cell => renderSnippet(nameSnippet, { name: cell.row.name }),\n *   }),\n *   columnHelper.accessor('state', {\n *     cell: cell => renderSnippet(stateSnippet, { state: cell.row.state }),\n *   }),\n * ]\n * ```\n * @see {@link https://tanstack.com/table/latest/docs/guide/column-defs}\n */\nexport function renderSnippet(snippet, params) {\n    return new RenderSnippetConfig(snippet, params);\n}\n"
		}
	],
	"type": "components:ui"
}