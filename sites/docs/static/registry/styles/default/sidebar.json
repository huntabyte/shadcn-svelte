{
	"name": "sidebar",
	"type": "registry:ui",
	"dependencies": [
		"bits-ui@next",
		"lucide-svelte"
	],
	"registryDependencies": [
		"is-mobile",
		"input",
		"tooltip",
		"skeleton",
		"separator",
		"button",
		"sheet"
	],
	"files": [
		{
			"name": "constants.ts",
			"content": "export const SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nexport const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nexport const SIDEBAR_WIDTH = \"16rem\";\nexport const SIDEBAR_WIDTH_MOBILE = \"18rem\";\nexport const SIDEBAR_WIDTH_ICON = \"3rem\";\nexport const SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n",
			"type": "registry:ui",
			"target": "sidebar/constants.ts"
		},
		{
			"name": "context.svelte.ts",
			"content": "import { IsMobile } from \"$lib/registry/default/hook/is-mobile.svelte.js\";\nimport { getContext, setContext } from \"svelte\";\nimport { SIDEBAR_KEYBOARD_SHORTCUT } from \"./constants.js\";\n\ntype Getter<T> = () => T;\n\nexport type SidebarStateProps = {\n\t/**\n\t * A getter function that returns the current open state of the sidebar.\n\t * We use a getter function here to support `bind:open` on the `Sidebar.Provider`\n\t * component.\n\t */\n\topen: Getter<boolean>;\n\n\t/**\n\t * A function that sets the open state of the sidebar. To support `bind:open`, we need\n\t * a source of truth for changing the open state to ensure it will be synced throughout\n\t * the sub-components and any `bind:` references.\n\t */\n\tsetOpen: (open: boolean) => void;\n};\n\nclass SidebarState {\n\topen = $derived.by(() => this.props.open());\n\topenMobile = $state(false);\n\tsetOpen: SidebarStateProps[\"setOpen\"];\n\t#isMobile: IsMobile;\n\tstate = $derived.by(() => (this.open ? \"expanded\" : \"collapsed\"));\n\n\tconstructor(readonly props: SidebarStateProps) {\n\t\tthis.setOpen = props.setOpen;\n\t\tthis.#isMobile = new IsMobile();\n\t}\n\n\t// Convenience getter for checking if the sidebar is mobile\n\t// without this, we would need to use `sidebar.isMobile.current` everywhere\n\tget isMobile() {\n\t\treturn this.#isMobile.current;\n\t}\n\n\t// Event handler to apply to the `<svelte:window>`\n\thandleShortcutKeydown = (e: KeyboardEvent) => {\n\t\tif (e.key === SIDEBAR_KEYBOARD_SHORTCUT && (e.metaKey || e.ctrlKey)) {\n\t\t\te.preventDefault();\n\t\t\tthis.toggleSidebar();\n\t\t}\n\t};\n\n\tsetOpenMobile = (value: boolean) => {\n\t\tthis.openMobile = value;\n\t};\n\n\ttoggleSidebar() {\n\t\treturn this.#isMobile.current\n\t\t\t? (this.openMobile = !this.openMobile)\n\t\t\t: this.setOpen(!this.open);\n\t}\n}\n\nconst SYMBOL_KEY = \"scn-sidebar\";\n\n/**\n * Instantiates a new `SidebarState` instance and sets it in the context.\n *\n * @param props The constructor props for the `SidebarState` class.\n * @returns  The `SidebarState` instance.\n */\nexport function setSidebar(props: SidebarStateProps): SidebarState {\n\treturn setContext(Symbol.for(SYMBOL_KEY), new SidebarState(props));\n}\n\n/**\n * Retrieves the `SidebarState` instance from the context. This is a class instance,\n * so you cannot destructure it.\n * @returns The `SidebarState` instance.\n */\nexport function useSidebar(): SidebarState {\n\treturn getContext(Symbol.for(SYMBOL_KEY));\n}\n",
			"type": "registry:ui",
			"target": "sidebar/context.svelte.ts"
		},
		{
			"name": "index.ts",
			"content": "import { useSidebar } from \"./context.svelte.js\";\nimport Content from \"./sidebar-content.svelte\";\nimport Footer from \"./sidebar-footer.svelte\";\nimport GroupAction from \"./sidebar-group-action.svelte\";\nimport GroupContent from \"./sidebar-group-content.svelte\";\nimport GroupLabel from \"./sidebar-group-label.svelte\";\nimport Group from \"./sidebar-group.svelte\";\nimport Header from \"./sidebar-header.svelte\";\nimport Input from \"./sidebar-input.svelte\";\nimport Inset from \"./sidebar-inset.svelte\";\nimport MenuAction from \"./sidebar-menu-action.svelte\";\nimport MenuBadge from \"./sidebar-menu-badge.svelte\";\nimport MenuButton from \"./sidebar-menu-button.svelte\";\nimport MenuItem from \"./sidebar-menu-item.svelte\";\nimport MenuSkeleton from \"./sidebar-menu-skeleton.svelte\";\nimport MenuSubButton from \"./sidebar-menu-sub-button.svelte\";\nimport MenuSubItem from \"./sidebar-menu-sub-item.svelte\";\nimport MenuSub from \"./sidebar-menu-sub.svelte\";\nimport Menu from \"./sidebar-menu.svelte\";\nimport Provider from \"./sidebar-provider.svelte\";\nimport Rail from \"./sidebar-rail.svelte\";\nimport Separator from \"./sidebar-separator.svelte\";\nimport Trigger from \"./sidebar-trigger.svelte\";\nimport Root from \"./sidebar.svelte\";\n\nexport {\n\tContent,\n\tFooter,\n\tGroup,\n\tGroupAction,\n\tGroupContent,\n\tGroupLabel,\n\tHeader,\n\tInput,\n\tInset,\n\tMenu,\n\tMenuAction,\n\tMenuBadge,\n\tMenuButton,\n\tMenuItem,\n\tMenuSkeleton,\n\tMenuSub,\n\tMenuSubButton,\n\tMenuSubItem,\n\tProvider,\n\tRail,\n\tRoot,\n\tSeparator,\n\t//\n\tRoot as Sidebar,\n\tContent as SidebarContent,\n\tFooter as SidebarFooter,\n\tGroup as SidebarGroup,\n\tGroupAction as SidebarGroupAction,\n\tGroupContent as SidebarGroupContent,\n\tGroupLabel as SidebarGroupLabel,\n\tHeader as SidebarHeader,\n\tInput as SidebarInput,\n\tInset as SidebarInset,\n\tMenu as SidebarMenu,\n\tMenuAction as SidebarMenuAction,\n\tMenuBadge as SidebarMenuBadge,\n\tMenuButton as SidebarMenuButton,\n\tMenuItem as SidebarMenuItem,\n\tMenuSkeleton as SidebarMenuSkeleton,\n\tMenuSub as SidebarMenuSub,\n\tMenuSubButton as SidebarMenuSubButton,\n\tMenuSubItem as SidebarMenuSubItem,\n\tProvider as SidebarProvider,\n\tRail as SidebarRail,\n\tSeparator as SidebarSeparator,\n\tTrigger as SidebarTrigger,\n\tTrigger,\n\tuseSidebar,\n};\n",
			"type": "registry:ui",
			"target": "sidebar/index.ts"
		},
		{
			"name": "sidebar-content.svelte",
			"content": "<script lang=\"ts\">\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"content\"\n\tclass={cn(\n\t\t\"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-content.svelte"
		},
		{
			"name": "sidebar-footer.svelte",
			"content": "<script lang=\"ts\">\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"footer\"\n\tclass={cn(\"flex flex-col gap-2 p-2\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-footer.svelte"
		},
		{
			"name": "sidebar-group-action.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLButtonAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\tchild,\n\t\t...restProps\n\t}: WithElementRef<HTMLButtonAttributes> & {\n\t\tchild?: Snippet<[{ props: Record<string, unknown> }]>;\n\t} = $props();\n\n\tconst propObj = $derived({\n\t\tclass: cn(\n\t\t\t\"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n\t\t\t// Increases the hit area of the button on mobile.\n\t\t\t\"after:absolute after:-inset-2 after:md:hidden\",\n\t\t\t\"group-data-[collapsible=icon]:hidden\",\n\t\t\tclassName\n\t\t),\n\t\t\"data-sidebar\": \"group-action\",\n\t\t...restProps,\n\t});\n</script>\n\n{#if child}\n\t{@render child({ props: propObj })}\n{:else}\n\t<button bind:this={ref} {...propObj}>\n\t\t{@render children?.()}\n\t</button>\n{/if}\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-group-action.svelte"
		},
		{
			"name": "sidebar-group-content.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"group-content\"\n\tclass={cn(\"w-full text-sm\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-group-content.svelte"
		},
		{
			"name": "sidebar-group-label.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tchild,\n\t\tclass: className,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> & {\n\t\tchild?: Snippet<[{ props: Record<string, unknown> }]>;\n\t} = $props();\n\n\tconst mergedProps = $derived({\n\t\tclass: cn(\n\t\t\t\"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n\t\t\t\"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n\t\t\tclassName\n\t\t),\n\t\t\"data-sidebar\": \"group-label\",\n\t\t...restProps,\n\t});\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<div bind:this={ref} {...mergedProps}>\n\t\t{@render children?.()}\n\t</div>\n{/if}\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-group-label.svelte"
		},
		{
			"name": "sidebar-group.svelte",
			"content": "<script lang=\"ts\">\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"group\"\n\tclass={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-group.svelte"
		},
		{
			"name": "sidebar-header.svelte",
			"content": "<script lang=\"ts\">\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"header\"\n\tclass={cn(\"flex flex-col gap-2 p-2\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-header.svelte"
		},
		{
			"name": "sidebar-input.svelte",
			"content": "<script lang=\"ts\">\n\timport type { ComponentProps } from \"svelte\";\n\timport { Input } from \"$lib/registry/default/ui/input/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tvalue = $bindable(\"\"),\n\t\tclass: className,\n\t\t...restProps\n\t}: ComponentProps<typeof Input> = $props();\n</script>\n\n<Input\n\tbind:ref\n\tbind:value\n\tdata-sidebar=\"input\"\n\tclass={cn(\n\t\t\"bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2\",\n\t\tclassName\n\t)}\n\t{...restProps}\n/>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-input.svelte"
		},
		{
			"name": "sidebar-inset.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();\n</script>\n\n<main\n\tbind:this={ref}\n\tclass={cn(\n\t\t\"bg-background relative flex min-h-svh flex-1 flex-col\",\n\t\t\"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</main>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-inset.svelte"
		},
		{
			"name": "sidebar-menu-action.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLButtonAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tshowOnHover = false,\n\t\tchildren,\n\t\tchild,\n\t\t...restProps\n\t}: WithElementRef<HTMLButtonAttributes> & {\n\t\tchild?: Snippet<[{ props: Record<string, unknown> }]>;\n\t\tshowOnHover?: boolean;\n\t} = $props();\n\n\tconst mergedProps = $derived({\n\t\tclass: cn(\n\t\t\t\"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n\t\t\t// Increases the hit area of the button on mobile.\n\t\t\t\"after:absolute after:-inset-2 after:md:hidden\",\n\t\t\t\"peer-data-[size=sm]/menu-button:top-1\",\n\t\t\t\"peer-data-[size=default]/menu-button:top-1.5\",\n\t\t\t\"peer-data-[size=lg]/menu-button:top-2.5\",\n\t\t\t\"group-data-[collapsible=icon]:hidden\",\n\t\t\tshowOnHover &&\n\t\t\t\t\"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n\t\t\tclassName\n\t\t),\n\t\t\"data-sidebar\": \"menu-action\",\n\t\t...restProps,\n\t});\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<button bind:this={ref} {...mergedProps}>\n\t\t{@render children?.()}\n\t</button>\n{/if}\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-action.svelte"
		},
		{
			"name": "sidebar-menu-badge.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"menu-badge\"\n\tclass={cn(\n\t\t\"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums\",\n\t\t\"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n\t\t\"peer-data-[size=sm]/menu-button:top-1\",\n\t\t\"peer-data-[size=default]/menu-button:top-1.5\",\n\t\t\"peer-data-[size=lg]/menu-button:top-2.5\",\n\t\t\"group-data-[collapsible=icon]:hidden\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-badge.svelte"
		},
		{
			"name": "sidebar-menu-button.svelte",
			"content": "<script lang=\"ts\" module>\n\timport { tv, type VariantProps } from \"tailwind-variants\";\n\n\texport const sidebarMenuButtonVariants = tv({\n\t\tbase: \"peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n\t\t\t\toutline:\n\t\t\t\t\t\"bg-background hover:bg-sidebar-accent hover:text-sidebar-accent-foreground shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: \"h-8 text-sm\",\n\t\t\t\tsm: \"h-7 text-xs\",\n\t\t\t\tlg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"default\",\n\t\t},\n\t});\n\n\texport type SidebarMenuButtonVariant = VariantProps<\n\t\ttypeof sidebarMenuButtonVariants\n\t>[\"variant\"];\n\texport type SidebarMenuButtonSize = VariantProps<typeof sidebarMenuButtonVariants>[\"size\"];\n</script>\n\n<script lang=\"ts\">\n\timport * as Tooltip from \"$lib/registry/default/ui/tooltip/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { mergeProps, type WithElementRef, type WithoutChildrenOrChild } from \"bits-ui\";\n\timport type { ComponentProps, Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { useSidebar } from \"./context.svelte.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\tchild,\n\t\tvariant = \"default\",\n\t\tsize = \"default\",\n\t\tisActive = false,\n\t\ttooltipContent,\n\t\ttooltipContentProps,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {\n\t\tisActive?: boolean;\n\t\tvariant?: SidebarMenuButtonVariant;\n\t\tsize?: SidebarMenuButtonSize;\n\t\ttooltipContent?: Snippet;\n\t\ttooltipContentProps?: WithoutChildrenOrChild<ComponentProps<typeof Tooltip.Content>>;\n\t\tchild?: Snippet<[{ props: Record<string, unknown> }]>;\n\t} = $props();\n\n\tconst sidebar = useSidebar();\n\n\tconst buttonProps = $derived({\n\t\tclass: cn(sidebarMenuButtonVariants({ variant, size }), className),\n\t\t\"data-sidebar\": \"menu-button\",\n\t\t\"data-size\": size,\n\t\t\"data-active\": isActive,\n\t\t...restProps,\n\t});\n</script>\n\n{#snippet Button({ props }: { props?: Record<string, unknown> })}\n\t{@const mergedProps = mergeProps(buttonProps, props)}\n\t{#if child}\n\t\t{@render child({ props: mergedProps })}\n\t{:else}\n\t\t<button bind:this={ref} {...mergedProps}>\n\t\t\t{@render children?.()}\n\t\t</button>\n\t{/if}\n{/snippet}\n\n{#if !tooltipContent}\n\t{@render Button({})}\n{:else}\n\t<Tooltip.Root>\n\t\t<Tooltip.Trigger>\n\t\t\t{#snippet child({ props })}\n\t\t\t\t{@render Button({ props })}\n\t\t\t{/snippet}\n\t\t</Tooltip.Trigger>\n\t\t<Tooltip.Content\n\t\t\tside=\"right\"\n\t\t\talign=\"center\"\n\t\t\thidden={sidebar.state !== \"collapsed\" || sidebar.isMobile}\n\t\t\tchildren={tooltipContent}\n\t\t\t{...tooltipContentProps}\n\t\t/>\n\t</Tooltip.Root>\n{/if}\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-button.svelte"
		},
		{
			"name": "sidebar-menu-item.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLLIElement>, HTMLLIElement> = $props();\n</script>\n\n<li\n\tbind:this={ref}\n\tdata-sidebar=\"menu-item\"\n\tclass={cn(\"group/menu-item relative\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</li>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-item.svelte"
		},
		{
			"name": "sidebar-menu-skeleton.svelte",
			"content": "<script lang=\"ts\">\n\timport { Skeleton } from \"$lib/registry/default/ui/skeleton/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tshowIcon = false,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLElement>> & {\n\t\tshowIcon?: boolean;\n\t} = $props();\n\n\t// Random width between 50% and 90%\n\tconst width = `${Math.floor(Math.random() * 40) + 50}%`;\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-sidebar=\"menu-skeleton\"\n\tclass={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n\t{...restProps}\n>\n\t{#if showIcon}\n\t\t<Skeleton class=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />\n\t{/if}\n\t<Skeleton\n\t\tclass=\"h-4 max-w-[--skeleton-width] flex-1\"\n\t\tdata-sidebar=\"menu-skeleton-text\"\n\t\tstyle=\"--skeleton-width: {width};\"\n\t/>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-skeleton.svelte"
		},
		{
			"name": "sidebar-menu-sub-button.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAnchorAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tchild,\n\t\tclass: className,\n\t\tsize = \"md\",\n\t\tisActive,\n\t\t...restProps\n\t}: WithElementRef<HTMLAnchorAttributes> & {\n\t\tchild?: Snippet<[{ props: Record<string, unknown> }]>;\n\t\tsize?: \"sm\" | \"md\";\n\t\tisActive?: boolean;\n\t} = $props();\n\n\tconst mergedProps = $derived({\n\t\tclass: cn(\n\t\t\t\"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n\t\t\t\"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n\t\t\tsize === \"sm\" && \"text-xs\",\n\t\t\tsize === \"md\" && \"text-sm\",\n\t\t\t\"group-data-[collapsible=icon]:hidden\",\n\t\t\tclassName\n\t\t),\n\t\t\"data-sidebar\": \"menu-sub-button\",\n\t\t\"data-size\": size,\n\t\t\"data-active\": isActive,\n\t\t...restProps,\n\t});\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<a bind:this={ref} {...mergedProps}>\n\t\t{@render children?.()}\n\t</a>\n{/if}\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-sub-button.svelte"
		},
		{
			"name": "sidebar-menu-sub-item.svelte",
			"content": "<script lang=\"ts\">\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLLIElement>> = $props();\n</script>\n\n<li bind:this={ref} data-sidebar=\"menu-sub-item\" {...restProps}>\n\t{@render children?.()}\n</li>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-sub-item.svelte"
		},
		{
			"name": "sidebar-menu-sub.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLUListElement>> = $props();\n</script>\n\n<ul\n\tbind:this={ref}\n\tdata-sidebar=\"menu-sub\"\n\tclass={cn(\n\t\t\"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n\t\t\"group-data-[collapsible=icon]:hidden\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</ul>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu-sub.svelte"
		},
		{
			"name": "sidebar-menu.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLUListElement>, HTMLUListElement> = $props();\n</script>\n\n<ul\n\tbind:this={ref}\n\tdata-sidebar=\"menu\"\n\tclass={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</ul>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-menu.svelte"
		},
		{
			"name": "sidebar-provider.svelte",
			"content": "<script lang=\"ts\">\n\timport * as Tooltip from \"$lib/registry/default/ui/tooltip/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport {\n\t\tSIDEBAR_COOKIE_MAX_AGE,\n\t\tSIDEBAR_COOKIE_NAME,\n\t\tSIDEBAR_WIDTH,\n\t\tSIDEBAR_WIDTH_ICON,\n\t} from \"./constants.js\";\n\timport { setSidebar } from \"./context.svelte.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\topen = $bindable(true),\n\t\tonOpenChange = () => {},\n\t\tcontrolledOpen = false,\n\t\tclass: className,\n\t\tstyle,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {\n\t\topen?: boolean;\n\t\tonOpenChange?: (open: boolean) => void;\n\t\tcontrolledOpen?: boolean;\n\t} = $props();\n\n\tconst sidebar = setSidebar({\n\t\topen: () => open,\n\t\tsetOpen: (value: boolean) => {\n\t\t\tif (controlledOpen) {\n\t\t\t\tonOpenChange(value);\n\t\t\t} else {\n\t\t\t\topen = value;\n\t\t\t\tonOpenChange(value);\n\t\t\t}\n\n\t\t\t// This sets the cookie to keep the sidebar state.\n\t\t\tdocument.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n\t\t},\n\t});\n</script>\n\n<svelte:window onkeydown={sidebar.handleShortcutKeydown} />\n\n<Tooltip.Provider delayDuration={0}>\n\t<div\n\t\tstyle=\"--sidebar-width: {SIDEBAR_WIDTH}; --sidebar-width-icon: {SIDEBAR_WIDTH_ICON}; {style}\"\n\t\tclass={cn(\n\t\t\t\"group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full\",\n\t\t\tclassName\n\t\t)}\n\t\tbind:this={ref}\n\t\t{...restProps}\n\t>\n\t\t{@render children?.()}\n\t</div>\n</Tooltip.Provider>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-provider.svelte"
		},
		{
			"name": "sidebar-rail.svelte",
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { useSidebar } from \"./context.svelte.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> = $props();\n\n\tconst sidebar = useSidebar();\n</script>\n\n<button\n\tbind:this={ref}\n\tdata-sidebar=\"rail\"\n\taria-label=\"Toggle Sidebar\"\n\ttabIndex={-1}\n\tonclick={() => sidebar.toggleSidebar()}\n\ttitle=\"Toggle Sidebar\"\n\tclass={cn(\n\t\t\"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n\t\t\"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n\t\t\"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n\t\t\"group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n\t\t\"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n\t\t\"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</button>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-rail.svelte"
		},
		{
			"name": "sidebar-separator.svelte",
			"content": "<script lang=\"ts\">\n\timport { Separator } from \"$lib/registry/default/ui/separator/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport type { ComponentProps } from \"svelte\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\t...restProps\n\t}: ComponentProps<typeof Separator> = $props();\n</script>\n\n<Separator\n\tbind:ref\n\tdata-sidebar=\"separator\"\n\tclass={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n\t{...restProps}\n/>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-separator.svelte"
		},
		{
			"name": "sidebar-trigger.svelte",
			"content": "<script lang=\"ts\">\n\timport { Button } from \"$lib/registry/default/ui/button/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport PanelLeft from \"lucide-svelte/icons/panel-left\";\n\timport type { ComponentProps } from \"svelte\";\n\timport { useSidebar } from \"./context.svelte.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tonclick,\n\t\t...restProps\n\t}: ComponentProps<typeof Button> & {\n\t\tonclick?: (e: MouseEvent) => void;\n\t} = $props();\n\n\tconst sidebar = useSidebar();\n</script>\n\n<Button\n\ttype=\"button\"\n\tonclick={(e) => {\n\t\tonclick?.(e);\n\t\tsidebar.toggleSidebar();\n\t}}\n\tdata-sidebar=\"trigger\"\n\tvariant=\"ghost\"\n\tsize=\"icon\"\n\tclass={cn(\"h-7 w-7\", className)}\n\t{...restProps}\n>\n\t<PanelLeft />\n\t<span class=\"sr-only\">Toggle Sidebar</span>\n</Button>\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar-trigger.svelte"
		},
		{
			"name": "sidebar.svelte",
			"content": "<script lang=\"ts\">\n\timport * as Sheet from \"$lib/registry/default/ui/sheet/index.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { SIDEBAR_WIDTH_MOBILE } from \"./constants.js\";\n\timport { useSidebar } from \"./context.svelte.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tside = \"left\",\n\t\tvariant = \"sidebar\",\n\t\tcollapsible = \"offcanvas\",\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {\n\t\tside?: \"left\" | \"right\";\n\t\tvariant?: \"sidebar\" | \"floating\" | \"inset\";\n\t\tcollapsible?: \"offcanvas\" | \"icon\" | \"none\";\n\t} = $props();\n\n\tconst sidebar = useSidebar();\n</script>\n\n{#if collapsible === \"none\"}\n\t<div\n\t\tclass={cn(\n\t\t\t\"bg-sidebar text-sidebar-foreground flex h-full w-[--sidebar-width] flex-col\",\n\t\t\tclassName\n\t\t)}\n\t\tbind:this={ref}\n\t\t{...restProps}\n\t>\n\t\t{@render children?.()}\n\t</div>\n{:else if sidebar.isMobile}\n\t<Sheet.Root\n\t\tcontrolledOpen\n\t\topen={sidebar.openMobile}\n\t\tonOpenChange={sidebar.setOpenMobile}\n\t\t{...restProps}\n\t>\n\t\t<Sheet.Content\n\t\t\tdata-sidebar=\"sidebar\"\n\t\t\tdata-mobile=\"true\"\n\t\t\tclass=\"bg-sidebar text-sidebar-foreground w-[--sidebar-width] p-0 [&>button]:hidden\"\n\t\t\tstyle=\"--sidebar-width: {SIDEBAR_WIDTH_MOBILE};\"\n\t\t\t{side}\n\t\t>\n\t\t\t<div class=\"flex h-full w-full flex-col\">\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\t\t</Sheet.Content>\n\t</Sheet.Root>\n{:else}\n\t<div\n\t\tbind:this={ref}\n\t\tclass=\"text-sidebar-foreground group peer hidden md:block\"\n\t\tdata-state={sidebar.state}\n\t\tdata-collapsible={sidebar.state === \"collapsed\" ? collapsible : \"\"}\n\t\tdata-variant={variant}\n\t\tdata-side={side}\n\t>\n\t\t<!-- This is what handles the sidebar gap on desktop -->\n\t\t<div\n\t\t\tclass={cn(\n\t\t\t\t\"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n\t\t\t\t\"group-data-[collapsible=offcanvas]:w-0\",\n\t\t\t\t\"group-data-[side=right]:rotate-180\",\n\t\t\t\tvariant === \"floating\" || variant === \"inset\"\n\t\t\t\t\t? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n\t\t\t\t\t: \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n\t\t\t)}\n\t\t></div>\n\t\t<div\n\t\t\tclass={cn(\n\t\t\t\t\"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n\t\t\t\tside === \"left\"\n\t\t\t\t\t? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n\t\t\t\t\t: \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n\t\t\t\t// Adjust the padding for floating and inset variants.\n\t\t\t\tvariant === \"floating\" || variant === \"inset\"\n\t\t\t\t\t? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n\t\t\t\t\t: \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...restProps}\n\t\t>\n\t\t\t<div\n\t\t\t\tdata-sidebar=\"sidebar\"\n\t\t\t\tclass=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow\"\n\t\t\t>\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{/if}\n",
			"type": "registry:ui",
			"target": "sidebar/sidebar.svelte"
		}
	]
}