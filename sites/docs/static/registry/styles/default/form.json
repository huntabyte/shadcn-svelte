{
	"name": "form",
	"dependencies": [
		"formsnap",
		"zod",
		"sveltekit-superforms"
	],
	"registryDependencies": [
		"button",
		"label"
	],
	"files": [
		{
			"name": "form-button.svelte",
			"content": "<script lang=\"ts\">\n\timport * as Button from \"$lib/registry/default/ui/button/index.js\";\n\n\ttype $$Props = Button.Props;\n\ttype $$Events = Button.Events;\n</script>\n\n<Button.Root type=\"submit\" on:click on:keydown {...$$restProps}>\n\t<slot />\n</Button.Root>\n"
		},
		{
			"name": "form-description.svelte",
			"content": "<script lang=\"ts\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype $$Props = HTMLAttributes<HTMLSpanElement>;\n\tlet className: string | undefined | null = undefined;\n\texport { className as class };\n</script>\n\n<FormPrimitive.Description\n\tclass={cn(\"text-sm text-muted-foreground\", className)}\n\t{...$$restProps}\n\tlet:descriptionAttrs\n>\n\t<slot {descriptionAttrs} />\n</FormPrimitive.Description>\n"
		},
		{
			"name": "form-element-field.svelte",
			"content": "<script lang=\"ts\" context=\"module\">\n\timport type { FormPathLeaves, SuperForm } from \"sveltekit-superforms\";\n\ttype T = Record<string, unknown>;\n\ttype U = FormPathLeaves<T>;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends FormPathLeaves<T>\">\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport * as FormPrimitive from \"formsnap\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype $$Props = FormPrimitive.ElementFieldProps<T, U> & HTMLAttributes<HTMLElement>;\n\n\texport let form: SuperForm<T>;\n\texport let name: U;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n</script>\n\n<FormPrimitive.ElementField {form} {name} let:constraints let:errors let:tainted let:value>\n\t<div class={cn(\"space-y-2\", className)}>\n\t\t<slot {constraints} {errors} {tainted} {value} />\n\t</div>\n</FormPrimitive.ElementField>\n"
		},
		{
			"name": "form-field-errors.svelte",
			"content": "<script lang=\"ts\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype $$Props = FormPrimitive.FieldErrorsProps & {\n\t\terrorClasses?: string | undefined | null;\n\t};\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n\texport let errorClasses: $$Props[\"class\"] = undefined;\n</script>\n\n<FormPrimitive.FieldErrors\n\tclass={cn(\"text-sm font-medium text-destructive\", className)}\n\t{...$$restProps}\n\tlet:errors\n\tlet:fieldErrorsAttrs\n\tlet:errorAttrs\n>\n\t<slot {errors} {fieldErrorsAttrs} {errorAttrs}>\n\t\t{#each errors as error}\n\t\t\t<div {...errorAttrs} class={cn(errorClasses)}>{error}</div>\n\t\t{/each}\n\t</slot>\n</FormPrimitive.FieldErrors>\n"
		},
		{
			"name": "form-field.svelte",
			"content": "<script lang=\"ts\" context=\"module\">\n\timport type { FormPath, SuperForm } from \"sveltekit-superforms\";\n\ttype T = Record<string, unknown>;\n\ttype U = FormPath<T>;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends FormPath<T>\">\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport * as FormPrimitive from \"formsnap\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype $$Props = FormPrimitive.FieldProps<T, U> & HTMLAttributes<HTMLElement>;\n\n\texport let form: SuperForm<T>;\n\texport let name: U;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n</script>\n\n<FormPrimitive.Field {form} {name} let:constraints let:errors let:tainted let:value>\n\t<div class={cn(\"space-y-2\", className)}>\n\t\t<slot {constraints} {errors} {tainted} {value} />\n\t</div>\n</FormPrimitive.Field>\n"
		},
		{
			"name": "form-fieldset.svelte",
			"content": "<script lang=\"ts\" context=\"module\">\n\timport type { FormPath, SuperForm } from \"sveltekit-superforms\";\n\ttype T = Record<string, unknown>;\n\ttype U = FormPath<T>;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends FormPath<T>\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype $$Props = FormPrimitive.FieldsetProps<T, U>;\n\n\texport let form: SuperForm<T>;\n\texport let name: U;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n</script>\n\n<FormPrimitive.Fieldset\n\t{form}\n\t{name}\n\tlet:constraints\n\tlet:errors\n\tlet:tainted\n\tlet:value\n\tclass={cn(\"space-y-2\", className)}\n>\n\t<slot {constraints} {errors} {tainted} {value} />\n</FormPrimitive.Fieldset>\n"
		},
		{
			"name": "form-label.svelte",
			"content": "<script lang=\"ts\">\n\timport type { Label as LabelPrimitive } from \"bits-ui\";\n\timport { getFormControl } from \"formsnap\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { Label } from \"$lib/registry/default/ui/label/index.js\";\n\n\ttype $$Props = LabelPrimitive.Props;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n\n\tconst { labelAttrs } = getFormControl();\n</script>\n\n<Label {...$labelAttrs} class={cn(\"data-[fs-error]:text-destructive\", className)} {...$$restProps}>\n\t<slot {labelAttrs} />\n</Label>\n"
		},
		{
			"name": "form-legend.svelte",
			"content": "<script lang=\"ts\">\n\timport * as FormPrimitive from \"formsnap\";\n\timport { cn } from \"$lib/utils.js\";\n\n\ttype $$Props = FormPrimitive.LegendProps;\n\n\tlet className: $$Props[\"class\"] = undefined;\n\texport { className as class };\n</script>\n\n<FormPrimitive.Legend\n\t{...$$restProps}\n\tclass={cn(\"text-sm font-medium leading-none data-[fs-error]:text-destructive\", className)}\n\tlet:legendAttrs\n>\n\t<slot {legendAttrs} />\n</FormPrimitive.Legend>\n"
		},
		{
			"name": "index.ts",
			"content": "import * as FormPrimitive from \"formsnap\";\nimport Description from \"./form-description.svelte\";\nimport Label from \"./form-label.svelte\";\nimport FieldErrors from \"./form-field-errors.svelte\";\nimport Field from \"./form-field.svelte\";\nimport Fieldset from \"./form-fieldset.svelte\";\nimport Legend from \"./form-legend.svelte\";\nimport ElementField from \"./form-element-field.svelte\";\nimport Button from \"./form-button.svelte\";\n\nconst Control = FormPrimitive.Control;\n\nexport {\n\tField,\n\tControl,\n\tLabel,\n\tButton,\n\tFieldErrors,\n\tDescription,\n\tFieldset,\n\tLegend,\n\tElementField,\n\t//\n\tField as FormField,\n\tControl as FormControl,\n\tDescription as FormDescription,\n\tLabel as FormLabel,\n\tFieldErrors as FormFieldErrors,\n\tFieldset as FormFieldset,\n\tLegend as FormLegend,\n\tElementField as FormElementField,\n\tButton as FormButton,\n};\n"
		}
	],
	"type": "components:ui"
}