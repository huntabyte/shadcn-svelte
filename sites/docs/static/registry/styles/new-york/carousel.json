{
	"name": "carousel",
	"type": "registry:ui",
	"dependencies": [
		"embla-carousel-svelte",
		"bits-ui",
		"svelte-radix"
	],
	"registryDependencies": [
		"button"
	],
	"files": [
		{
			"name": "carousel-content.svelte",
			"content": "<script lang=\"ts\">\n\timport emblaCarouselSvelte from \"embla-carousel-svelte\";\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { getEmblaContext } from \"./context.js\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();\n\n\tconst emblaCtx = getEmblaContext(\"<Carousel.Content/>\");\n</script>\n\n<!-- svelte-ignore event_directive_deprecated -->\n<div\n\tclass=\"overflow-hidden\"\n\tuse:emblaCarouselSvelte={{\n\t\toptions: {\n\t\t\tcontainer: \"[data-embla-container]\",\n\t\t\tslides: \"[data-embla-slide]\",\n\t\t\t...emblaCtx.options,\n\t\t\taxis: emblaCtx.orientation === \"horizontal\" ? \"x\" : \"y\",\n\t\t},\n\t\tplugins: emblaCtx.plugins,\n\t}}\n\ton:emblaInit={emblaCtx.onInit}\n>\n\t<div\n\t\tbind:this={ref}\n\t\tclass={cn(\n\t\t\t\"flex\",\n\t\t\temblaCtx.orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n\t\t\tclassName\n\t\t)}\n\t\tdata-embla-container=\"\"\n\t\t{...restProps}\n\t>\n\t\t{@render children?.()}\n\t</div>\n</div>\n",
			"type": "registry:ui",
			"target": "carousel/carousel-content.svelte"
		},
		{
			"name": "carousel-item.svelte",
			"content": "<script lang=\"ts\">\n\timport type { WithElementRef } from \"bits-ui\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { getEmblaContext } from \"./context.js\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();\n\n\tconst emblaCtx = getEmblaContext(\"<Carousel.Item/>\");\n</script>\n\n<div\n\tbind:this={ref}\n\trole=\"group\"\n\taria-roledescription=\"slide\"\n\tclass={cn(\n\t\t\"min-w-0 shrink-0 grow-0 basis-full\",\n\t\temblaCtx.orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n\t\tclassName\n\t)}\n\tdata-embla-slide=\"\"\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "carousel/carousel-item.svelte"
		},
		{
			"name": "carousel-next.svelte",
			"content": "<script lang=\"ts\">\n\timport ArrowRight from \"svelte-radix/ArrowRight.svelte\";\n\timport type { WithoutChildren } from \"bits-ui\";\n\timport { getEmblaContext } from \"./context.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { Button, type Props } from \"$lib/registry/new-york/ui/button/index.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tvariant = \"outline\",\n\t\tsize = \"icon\",\n\t\t...restProps\n\t}: WithoutChildren<Props> = $props();\n\n\tconst emblaCtx = getEmblaContext(\"<Carousel.Next/>\");\n</script>\n\n<Button\n\t{variant}\n\t{size}\n\tclass={cn(\n\t\t\"absolute size-8 touch-manipulation rounded-full\",\n\t\temblaCtx.orientation === \"horizontal\"\n\t\t\t? \"-right-12 top-1/2 -translate-y-1/2\"\n\t\t\t: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\tclassName\n\t)}\n\tdisabled={!emblaCtx.canScrollNext}\n\tonclick={emblaCtx.scrollNext}\n\tonkeydown={emblaCtx.handleKeyDown}\n\tbind:ref\n\t{...restProps}\n>\n\t<ArrowRight class=\"size-4\" />\n\t<span class=\"sr-only\">Next slide</span>\n</Button>\n",
			"type": "registry:ui",
			"target": "carousel/carousel-next.svelte"
		},
		{
			"name": "carousel-previous.svelte",
			"content": "<script lang=\"ts\">\n\timport ArrowLeft from \"svelte-radix/ArrowLeft.svelte\";\n\timport type { WithoutChildren } from \"bits-ui\";\n\timport { getEmblaContext } from \"./context.js\";\n\timport { cn } from \"$lib/utils.js\";\n\timport { Button, type Props } from \"$lib/registry/new-york/ui/button/index.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tvariant = \"outline\",\n\t\tsize = \"icon\",\n\t\t...restProps\n\t}: WithoutChildren<Props> = $props();\n\n\tconst emblaCtx = getEmblaContext(\"<Carousel.Previous/>\");\n</script>\n\n<Button\n\t{variant}\n\t{size}\n\tclass={cn(\n\t\t\"absolute size-8 touch-manipulation rounded-full\",\n\t\temblaCtx.orientation === \"horizontal\"\n\t\t\t? \"-left-12 top-1/2 -translate-y-1/2\"\n\t\t\t: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n\t\tclassName\n\t)}\n\tdisabled={!emblaCtx.canScrollPrev}\n\tonclick={emblaCtx.scrollPrev}\n\tonkeydown={emblaCtx.handleKeyDown}\n\t{...restProps}\n\tbind:ref\n>\n\t<ArrowLeft class=\"size-4\" />\n\t<span class=\"sr-only\">Previous slide</span>\n</Button>\n",
			"type": "registry:ui",
			"target": "carousel/carousel-previous.svelte"
		},
		{
			"name": "carousel.svelte",
			"content": "<script lang=\"ts\">\n\timport {\n\t\ttype CarouselAPI,\n\t\ttype CarouselProps,\n\t\ttype EmblaContext,\n\t\tsetEmblaContext,\n\t} from \"./context.js\";\n\timport { cn } from \"$lib/utils.js\";\n\n\tlet {\n\t\topts = {},\n\t\tplugins = [],\n\t\tsetApi = () => {},\n\t\torientation = \"horizontal\",\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: CarouselProps = $props();\n\n\tlet carouselState = $state<EmblaContext>({\n\t\tapi: undefined,\n\t\tscrollPrev,\n\t\tscrollNext,\n\t\torientation,\n\t\tcanScrollNext: false,\n\t\tcanScrollPrev: false,\n\t\thandleKeyDown,\n\t\toptions: opts,\n\t\tplugins,\n\t\tonInit,\n\t\tscrollSnaps: [],\n\t\tselectedIndex: 0,\n\t\tscrollTo,\n\t});\n\n\tsetEmblaContext(carouselState);\n\n\tfunction scrollPrev() {\n\t\tcarouselState.api?.scrollPrev();\n\t}\n\tfunction scrollNext() {\n\t\tcarouselState.api?.scrollNext();\n\t}\n\tfunction scrollTo(index: number, jump?: boolean) {\n\t\tcarouselState.api?.scrollTo(index, jump);\n\t}\n\n\tfunction onSelect(api: CarouselAPI) {\n\t\tif (!api) return;\n\t\tcarouselState.canScrollPrev = api.canScrollPrev();\n\t\tcarouselState.canScrollNext = api.canScrollNext();\n\t\tcarouselState.selectedIndex = api.selectedScrollSnap();\n\t}\n\n\t$effect(() => {\n\t\tif (carouselState.api) {\n\t\t\tonSelect(carouselState.api);\n\t\t\tcarouselState.api.on(\"select\", onSelect);\n\t\t\tcarouselState.api.on(\"reInit\", onSelect);\n\t\t}\n\t});\n\n\tfunction handleKeyDown(e: KeyboardEvent) {\n\t\tif (e.key === \"ArrowLeft\") {\n\t\t\te.preventDefault();\n\t\t\tscrollPrev();\n\t\t} else if (e.key === \"ArrowRight\") {\n\t\t\te.preventDefault();\n\t\t\tscrollNext();\n\t\t}\n\t}\n\n\t$effect(() => {\n\t\tsetApi(carouselState.api);\n\t});\n\n\tfunction onInit(event: CustomEvent<CarouselAPI>) {\n\t\tcarouselState.api = event.detail;\n\n\t\tcarouselState.scrollSnaps = carouselState.api.scrollSnapList();\n\t}\n\n\t$effect(() => {\n\t\treturn () => {\n\t\t\tcarouselState.api?.off(\"select\", onSelect);\n\t\t};\n\t});\n</script>\n\n<div class={cn(\"relative\", className)} role=\"region\" aria-roledescription=\"carousel\" {...restProps}>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:ui",
			"target": "carousel/carousel.svelte"
		},
		{
			"name": "context.ts",
			"content": "import type { EmblaCarouselSvelteType } from \"embla-carousel-svelte\";\nimport type emblaCarouselSvelte from \"embla-carousel-svelte\";\nimport { getContext, hasContext, setContext } from \"svelte\";\nimport type { PrimitiveDivAttributes } from \"$lib/utils.js\";\n\nexport type CarouselAPI =\n\tNonNullable<NonNullable<EmblaCarouselSvelteType[\"$$_attributes\"]>[\"on:emblaInit\"]> extends (\n\t\tevt: CustomEvent<infer CarouselAPI>\n\t) => void\n\t\t? CarouselAPI\n\t\t: never;\n\ntype EmblaCarouselConfig = NonNullable<Parameters<typeof emblaCarouselSvelte>[1]>;\n\nexport type CarouselOptions = EmblaCarouselConfig[\"options\"];\nexport type CarouselPlugins = EmblaCarouselConfig[\"plugins\"];\n\n////\n\nexport type CarouselProps = {\n\topts?: CarouselOptions;\n\tplugins?: CarouselPlugins;\n\tsetApi?: (api: CarouselAPI | undefined) => void;\n\torientation?: \"horizontal\" | \"vertical\";\n} & PrimitiveDivAttributes;\n\nconst EMBLA_CAROUSEL_CONTEXT = Symbol(\"EMBLA_CAROUSEL_CONTEXT\");\n\nexport type EmblaContext = {\n\tapi: CarouselAPI | undefined;\n\torientation: \"horizontal\" | \"vertical\";\n\tscrollNext: () => void;\n\tscrollPrev: () => void;\n\tcanScrollNext: boolean;\n\tcanScrollPrev: boolean;\n\thandleKeyDown: (e: KeyboardEvent) => void;\n\toptions: CarouselOptions;\n\tplugins: CarouselPlugins;\n\tonInit: (e: CustomEvent<CarouselAPI>) => void;\n\tscrollTo: (index: number, jump?: boolean) => void;\n\tscrollSnaps: number[];\n\tselectedIndex: number;\n};\n\nexport function setEmblaContext(config: EmblaContext): EmblaContext {\n\tsetContext(EMBLA_CAROUSEL_CONTEXT, config);\n\treturn config;\n}\n\nexport function getEmblaContext(name = \"This component\") {\n\tif (!hasContext(EMBLA_CAROUSEL_CONTEXT)) {\n\t\tthrow new Error(`${name} must be used within a <Carousel.Root> component`);\n\t}\n\treturn getContext<ReturnType<typeof setEmblaContext>>(EMBLA_CAROUSEL_CONTEXT);\n}\n",
			"type": "registry:ui",
			"target": "carousel/context.ts"
		},
		{
			"name": "index.ts",
			"content": "import Root from \"./carousel.svelte\";\nimport Content from \"./carousel-content.svelte\";\nimport Item from \"./carousel-item.svelte\";\nimport Previous from \"./carousel-previous.svelte\";\nimport Next from \"./carousel-next.svelte\";\n\nexport {\n\tRoot,\n\tContent,\n\tItem,\n\tPrevious,\n\tNext,\n\t//\n\tRoot as Carousel,\n\tContent as CarouselContent,\n\tItem as CarouselItem,\n\tPrevious as CarouselPrevious,\n\tNext as CarouselNext,\n};\n",
			"type": "registry:ui",
			"target": "carousel/index.ts"
		}
	]
}