import template from "lodash.template";
import fs from "node:fs";
import path from "node:path";
import process from "node:process";
import { rimraf } from "rimraf";
import { colorMapping, colors } from "../src/lib/registry/colors";
import { registrySchema } from "../src/lib/registry/schema";
import { themes } from "../src/lib/registry/themes";
import { buildRegistry } from "./registry";
import { BASE_STYLES, BASE_STYLES_WITH_VARIABLES, THEME_STYLES_WITH_VARIABLES } from "./templates";
import { getChunks } from "./transform-chunks";
import { transformContent } from "./transformers";
import prettier from "prettier";
import prettierPluginSvelte from "prettier-plugin-svelte";

const REGISTRY_PATH = path.resolve("static", "registry");
const THEMES_CSS_PATH = path.resolve("static");
const REGISTRY_IGNORE = ["super-form"];

const prettierConfig: prettier.Config = {
	useTabs: true,
	singleQuote: false,
	trailingComma: "es5",
	printWidth: 100,
};

function writeFileWithDirs(
	filePath: string,
	data: string,
	options: Parameters<typeof fs.writeFileSync>[2] = {}
) {
	// Create directory path if it doesn't exist
	const dirname = path.dirname(filePath);
	fs.mkdirSync(dirname, { recursive: true });

	// Write the file
	fs.writeFileSync(filePath, data, options);
}

async function main() {
	const registry = await buildRegistry();

	const selfReferenced = registry.filter((item) => item.registryDependencies.includes(item.name));
	const selfReferenceError = selfReferenced
		.map((item) => `Registry item '${item.name}' depends on itself`)
		.join("\n");
	if (selfReferenceError) {
		throw new Error(selfReferenceError);
	}

	const result = registrySchema.safeParse(registry);

	if (!result.success) {
		console.error(result.error);
		process.exit(1);
	}

	// ----------------------------------------------------------------------------
	// Build blocks registry (__registry__/blocks.js) and block chunks (__registry__/chunks/[style]/[block]-[chunk].svelte)
	// ----------------------------------------------------------------------------
	const registryChunksDirPath = path.resolve("src", "__registry__", "chunks");
	const libPath = path.resolve("src", "lib", "registry");
	rimraf.sync(registryChunksDirPath);
	let blocksIndex = `
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
export const Blocks = {
`;

	const chunkStyleDir = path.resolve(registryChunksDirPath);
	// Create directory if it doesn't exist.
	if (!fs.existsSync(chunkStyleDir)) {
		fs.mkdirSync(chunkStyleDir, { recursive: true });
	}
	// Creates chunk files
	for (const block of result.data) {
		if (block.type !== "registry:block") continue;
		const file = block.files[0];
		const blockPath = path.resolve(libPath, "block", file.name);
		const chunkDir = path.resolve(registryChunksDirPath);

		const chunks = getChunks(file.content, blockPath);
		for (const chunk of chunks) {
			const chunkPath = path.resolve(chunkDir, `${chunk.name}.svelte`);
			writeFileWithDirs(chunkPath, chunk.content, { encoding: "utf8" });
		}

		const isDir = !fs.existsSync(
			path.resolve("src", "lib", "registry", "block", `${block.name}.svelte`)
		);
		const blockFile = isDir ? `${block.name}/+page.svelte` : `${block.name}.svelte`;

		blocksIndex += `
	"${block.name}": {
		name: "${block.name}",
		type: "${block.type}",
		chunks: [${chunks.map((chunk) => ` { name: "${chunk.name}", description: "${chunk.description}", container: { className: "${chunk.container.className}" }, raw: () => import("./chunks/${chunk.name}.svelte?raw").then((m) => m.default), component: () => import("./chunks/${chunk.name}.svelte").then((m) => m.default) }`)}],
		component: () => import("../lib/registry/block/${blockFile}").then((m) => m.default),
		raw: () => import("../lib/registry/block/${blockFile}?raw").then((m) => m.default),
	},`;
	}

	blocksIndex += "\n};\n";
	const blocksPath = path.resolve("src", "__registry__", "blocks.js");
	writeFileWithDirs(blocksPath, blocksIndex);

	// ----------------------------------------------------------------------------
	// Build __registry__/index.js.
	// ----------------------------------------------------------------------------
	let index = `
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
export const Index = {
`;

	// Build style index.
	for (const item of result.data) {
		if (item.type === "registry:ui" || item.type === "registry:block") {
			continue;
		}
		const type = item.type.split(":")[1];

		const resolveFiles = item.files.map((file) => `../lib/registry/${file.path}`);
		const componentLine =
			item.type === "registry:hook"
				? "component: () => {}"
				: `component: () => import("../lib/registry/${type}/${item.name}.svelte").then((m) => m.default)`;

		index += `
"${item.name}": {
	name: "${item.name}",
	type: "${item.type}",
	registryDependencies: ${JSON.stringify(item.registryDependencies)},
	${componentLine},
	files: [${resolveFiles.map((file) => `"${file.replaceAll("\\", "/")}"`)}],
	raw: () => import("../lib/registry/${type}/${item.name}.svelte?raw").then((m) => m.default),
},`;
	}

	index += `
}
`;

	// Write style index.
	const registryPath = path.resolve("src", "__registry__", "index.js");
	rimraf.sync(registryPath);
	writeFileWithDirs(registryPath, index);

	// ----------------------------------------------------------------------------
	// Build registry/[name].json.
	// ----------------------------------------------------------------------------
	// Create the registry directory
	const targetPath = path.join(REGISTRY_PATH);
	const targetTsPath = `${targetPath}/ts`;
	const targetJsPath = `${targetPath}/js`;

	// Create directory if it doesn't exist.
	if (!fs.existsSync(targetTsPath)) {
		fs.mkdirSync(targetTsPath, { recursive: true });
	}

	// Create JS directory if it doesn't exist.
	if (!fs.existsSync(targetJsPath)) {
		fs.mkdirSync(targetJsPath, { recursive: true });
	}

	for (const item of result.data) {
		const allowedTypes = ["registry:ui", "registry:hook", "registry:block"];
		if (!allowedTypes.includes(item.type)) continue;

		// discard `path` prop
		const files = item.files.map((file) => ({ ...file, path: undefined }));

		const jsFiles = await Promise.all(
			files.map(async (file) => {
				let content = await transformContent(file.content, file.name);
				const fileName = file.name.replace(".ts", ".js");
				// format
				content = await prettier.format(content, {
					...prettierConfig,
					filepath: fileName,
					plugins: [prettierPluginSvelte],
					overrides: [{ files: "*.svelte", options: { parser: "svelte" } }],
				});
				return {
					name: fileName,
					content,
					target: file.target.replace(".ts", ".js"),
					type: file.type,
				};
			})
		);

		const payload = {
			...item,
			files,
		};

		const jsPayload = {
			...item,
			files: jsFiles,
		};

		writeFileWithDirs(
			path.join(targetTsPath, `${item.name}.json`),
			JSON.stringify(payload, null, "\t"),
			"utf-8"
		);

		writeFileWithDirs(
			path.join(targetJsPath, `${item.name}.json`),
			JSON.stringify(jsPayload, null, "\t"),
			"utf-8"
		);
	}

	// ----------------------------------------------------------------------------
	// Build registry/index.json.
	// ----------------------------------------------------------------------------
	const names = result.data
		.filter((item) => item.type === "registry:ui" && !REGISTRY_IGNORE.includes(item.name))
		.map((item) => ({
			...item,
			// The `default` style uses `@lucide/svelte`, so we'll discard it for the purposes of the index
			dependencies: item.dependencies.filter((dep) => dep !== "@lucide/svelte"),
			// We only want the relative file paths
			files: item.files.map((file) => ({ path: file.path, type: "registry:ui" })),
		}));
	const registryJson = JSON.stringify(names, null, "\t");
	rimraf.sync(path.join(REGISTRY_PATH, "index.json"));
	writeFileWithDirs(path.join(REGISTRY_PATH, "index.json"), registryJson, "utf-8");

	// ----------------------------------------------------------------------------
	// Build registry/colors/index.json.
	// ----------------------------------------------------------------------------
	const colorsTargetPath = path.join(REGISTRY_PATH, "colors");
	rimraf.sync(colorsTargetPath);
	if (!fs.existsSync(colorsTargetPath)) {
		fs.mkdirSync(colorsTargetPath, { recursive: true });
	}

	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const colorsData: Record<string, any> = {};
	for (const [color, value] of Object.entries(colors)) {
		if (typeof value === "string") {
			colorsData[color] = value;
			continue;
		}

		if (Array.isArray(value)) {
			colorsData[color] = value.map((item) => ({
				...item,
				oklch: item.oklch,
			}));
			continue;
		}

		if (typeof value === "object") {
			colorsData[color] = {
				...value,
				oklch: value.oklch,
			};
			continue;
		}
	}

	writeFileWithDirs(
		path.join(colorsTargetPath, "index.json"),
		JSON.stringify(colorsData, null, "\t"),
		"utf-8"
	);

	// ----------------------------------------------------------------------------
	// Build registry/colors/[base].json.
	// ----------------------------------------------------------------------------

	for (const baseColor of ["slate", "gray", "zinc", "neutral", "stone", "lime"]) {
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		const base: Record<string, any> = {
			inlineColors: {},
			cssVars: {},
		};
		for (const [mode, values] of Object.entries(colorMapping)) {
			base.inlineColors[mode] = {};
			base.cssVars[mode] = {};
			for (const [key, value] of Object.entries(values)) {
				if (typeof value === "string") {
					const resolvedColor = value.replace(/\{\{base\}\}-/g, `${baseColor}-`);
					base.inlineColors[mode][key] = resolvedColor;

					const [resolvedBase, scale] = resolvedColor.split("-");
					const color = scale
						? colorsData[resolvedBase].find(
								// eslint-disable-next-line @typescript-eslint/no-explicit-any
								(item: any) => item.scale === Number.parseInt(scale)
							)
						: colorsData[resolvedBase];
					if (color) {
						base.cssVars[mode][key] = color.oklch;
					}
				}
			}
		}

		// Build css vars.
		base.inlineColorsTemplate = template(BASE_STYLES)({});
		base.cssVarsTemplate = template(BASE_STYLES_WITH_VARIABLES)({
			colors: base.cssVars,
		});

		writeFileWithDirs(
			path.join(REGISTRY_PATH, "colors", `${baseColor}.json`),
			JSON.stringify(base, null, "\t"),
			"utf-8"
		);
	}

	// ----------------------------------------------------------------------------
	// Build registry/themes.css
	// ----------------------------------------------------------------------------

	const themeCSS = [];
	for (const theme of themes) {
		themeCSS.push(
			template(THEME_STYLES_WITH_VARIABLES)({
				colors: theme.cssVars,
				theme: theme.name,
			})
		);
	}

	writeFileWithDirs(path.join(THEMES_CSS_PATH, `themes.css`), themeCSS.join("\n"), "utf-8");

	console.info("✅ Done!");
}

await main();
